"""
üìä TRADING STRATEGIES - C√°c chi·∫øn l∆∞·ª£c giao d·ªãch
==============================================

Module ch·ª©a c√°c chi·∫øn l∆∞·ª£c giao d·ªãch ph·ªï bi·∫øn ƒë·ªÉ backtesting
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
import logging
from abc import ABC, abstractmethod
from dataclasses import dataclass

from .backtesting_engine import BacktestingEngine, OrderType

@dataclass
class StrategySignal:
    """T√≠n hi·ªáu t·ª´ chi·∫øn l∆∞·ª£c"""
    timestamp: datetime
    symbol: str
    signal_type: str  # 'BUY', 'SELL', 'HOLD'
    confidence: float  # 0-1
    quantity: int = 0
    price: float = 0.0
    reason: str = ""

class TradingStrategy(ABC):
    """
    Base class cho t·∫•t c·∫£ chi·∫øn l∆∞·ª£c giao d·ªãch
    """
    
    def __init__(self, name: str):
        """
        Kh·ªüi t·∫°o chi·∫øn l∆∞·ª£c
        
        Args:
            name: T√™n chi·∫øn l∆∞·ª£c
        """
        self.name = name
        self.logger = logging.getLogger(f"{__name__}.{name}")
        self.parameters = {}
        
    @abstractmethod
    def generate_signals(self, data: pd.DataFrame) -> List[StrategySignal]:
        """
        T·∫°o t√≠n hi·ªáu giao d·ªãch t·ª´ d·ªØ li·ªáu
        
        Args:
            data: DataFrame ch·ª©a d·ªØ li·ªáu OHLCV v√† indicators
            
        Returns:
            List c√°c StrategySignal
        """
        pass
    
    def set_parameters(self, **kwargs):
        """C·∫≠p nh·∫≠t tham s·ªë chi·∫øn l∆∞·ª£c"""
        self.parameters.update(kwargs)
        self.logger.info(f"üìù C·∫≠p nh·∫≠t tham s·ªë {self.name}: {kwargs}")

class MovingAverageCrossoverStrategy(TradingStrategy):
    """
    Chi·∫øn l∆∞·ª£c c·∫Øt MA (Moving Average Crossover)
    """
    
    def __init__(self, fast_period: int = 10, slow_period: int = 20):
        """
        Kh·ªüi t·∫°o MA Crossover Strategy
        
        Args:
            fast_period: Chu k·ª≥ MA nhanh
            slow_period: Chu k·ª≥ MA ch·∫≠m
        """
        super().__init__("MA_Crossover")
        self.fast_period = fast_period
        self.slow_period = slow_period
        
    def generate_signals(self, data: pd.DataFrame) -> List[StrategySignal]:
        """
        T·∫°o t√≠n hi·ªáu khi MA nhanh c·∫Øt MA ch·∫≠m
        """
        signals = []
        
        # T√≠nh MA n·∫øu ch∆∞a c√≥
        if f'sma_{self.fast_period}' not in data.columns:
            data[f'sma_{self.fast_period}'] = data['close'].rolling(self.fast_period).mean()
        
        if f'sma_{self.slow_period}' not in data.columns:
            data[f'sma_{self.slow_period}'] = data['close'].rolling(self.slow_period).mean()
        
        fast_ma = data[f'sma_{self.fast_period}']
        slow_ma = data[f'sma_{self.slow_period}']
        
        # T√¨m crossover points
        for i in range(1, len(data)):
            if pd.isna(fast_ma.iloc[i]) or pd.isna(slow_ma.iloc[i]):
                continue
            
            prev_fast = fast_ma.iloc[i-1]
            prev_slow = slow_ma.iloc[i-1]
            curr_fast = fast_ma.iloc[i]
            curr_slow = slow_ma.iloc[i]
            
            # Golden Cross (MA nhanh c·∫Øt l√™n MA ch·∫≠m)
            if prev_fast <= prev_slow and curr_fast > curr_slow:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='BUY',
                    confidence=0.7,
                    price=data['close'].iloc[i],
                    reason=f"Golden Cross: MA{self.fast_period} c·∫Øt l√™n MA{self.slow_period}"
                ))
            
            # Death Cross (MA nhanh c·∫Øt xu·ªëng MA ch·∫≠m)
            elif prev_fast >= prev_slow and curr_fast < curr_slow:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='SELL',
                    confidence=0.7,
                    price=data['close'].iloc[i],
                    reason=f"Death Cross: MA{self.fast_period} c·∫Øt xu·ªëng MA{self.slow_period}"
                ))
        
        return signals

class RSIStrategy(TradingStrategy):
    """
    Chi·∫øn l∆∞·ª£c RSI (Relative Strength Index)
    """
    
    def __init__(self, period: int = 14, oversold: int = 30, overbought: int = 70):
        """
        Kh·ªüi t·∫°o RSI Strategy
        
        Args:
            period: Chu k·ª≥ RSI
            oversold: Ng∆∞·ª°ng qu√° b√°n
            overbought: Ng∆∞·ª°ng qu√° mua
        """
        super().__init__("RSI")
        self.period = period
        self.oversold = oversold
        self.overbought = overbought
    
    def generate_signals(self, data: pd.DataFrame) -> List[StrategySignal]:
        """
        T·∫°o t√≠n hi·ªáu d·ª±a tr√™n RSI oversold/overbought
        """
        signals = []
        
        # T√≠nh RSI n·∫øu ch∆∞a c√≥
        if 'rsi' not in data.columns:
            data['rsi'] = self._calculate_rsi(data['close'], self.period)
        
        rsi = data['rsi']
        
        for i in range(1, len(data)):
            if pd.isna(rsi.iloc[i]):
                continue
            
            current_rsi = rsi.iloc[i]
            prev_rsi = rsi.iloc[i-1]
            
            # RSI tho√°t kh·ªèi v√πng oversold
            if prev_rsi <= self.oversold and current_rsi > self.oversold:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='BUY',
                    confidence=0.8,
                    price=data['close'].iloc[i],
                    reason=f"RSI tho√°t oversold: {current_rsi:.1f}"
                ))
            
            # RSI v√†o v√πng overbought
            elif prev_rsi < self.overbought and current_rsi >= self.overbought:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='SELL',
                    confidence=0.8,
                    price=data['close'].iloc[i],
                    reason=f"RSI overbought: {current_rsi:.1f}"
                ))
        
        return signals
    
    def _calculate_rsi(self, prices: pd.Series, period: int) -> pd.Series:
        """T√≠nh RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

class MACDStrategy(TradingStrategy):
    """
    Chi·∫øn l∆∞·ª£c MACD (Moving Average Convergence Divergence)
    """
    
    def __init__(self, fast: int = 12, slow: int = 26, signal: int = 9):
        """
        Kh·ªüi t·∫°o MACD Strategy
        
        Args:
            fast: Chu k·ª≥ EMA nhanh
            slow: Chu k·ª≥ EMA ch·∫≠m  
            signal: Chu k·ª≥ EMA signal line
        """
        super().__init__("MACD")
        self.fast = fast
        self.slow = slow
        self.signal = signal
    
    def generate_signals(self, data: pd.DataFrame) -> List[StrategySignal]:
        """
        T·∫°o t√≠n hi·ªáu d·ª±a tr√™n MACD crossover
        """
        signals = []
        
        # T√≠nh MACD n·∫øu ch∆∞a c√≥
        if 'macd' not in data.columns:
            self._calculate_macd(data)
        
        macd = data['macd']
        macd_signal = data['macd_signal']
        
        for i in range(1, len(data)):
            if pd.isna(macd.iloc[i]) or pd.isna(macd_signal.iloc[i]):
                continue
            
            prev_macd = macd.iloc[i-1]
            prev_signal = macd_signal.iloc[i-1]
            curr_macd = macd.iloc[i]
            curr_signal = macd_signal.iloc[i]
            
            # MACD c·∫Øt l√™n signal line
            if prev_macd <= prev_signal and curr_macd > curr_signal:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='BUY',
                    confidence=0.75,
                    price=data['close'].iloc[i],
                    reason=f"MACD Bullish Crossover: {curr_macd:.3f} > {curr_signal:.3f}"
                ))
            
            # MACD c·∫Øt xu·ªëng signal line
            elif prev_macd >= prev_signal and curr_macd < curr_signal:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='SELL',
                    confidence=0.75,
                    price=data['close'].iloc[i],
                    reason=f"MACD Bearish Crossover: {curr_macd:.3f} < {curr_signal:.3f}"
                ))
        
        return signals
    
    def _calculate_macd(self, data: pd.DataFrame):
        """T√≠nh MACD"""
        ema_fast = data['close'].ewm(span=self.fast).mean()
        ema_slow = data['close'].ewm(span=self.slow).mean()
        data['macd'] = ema_fast - ema_slow
        data['macd_signal'] = data['macd'].ewm(span=self.signal).mean()
        data['macd_histogram'] = data['macd'] - data['macd_signal']

class MeanReversionStrategy(TradingStrategy):
    """
    Chi·∫øn l∆∞·ª£c Mean Reversion (H·ªìi quy v·ªÅ trung b√¨nh)
    """
    
    def __init__(self, period: int = 20, entry_threshold: float = 2.0, exit_threshold: float = 0.5):
        """
        Kh·ªüi t·∫°o Mean Reversion Strategy
        
        Args:
            period: Chu k·ª≥ t√≠nh moving average
            entry_threshold: Ng∆∞·ª°ng v√†o l·ªánh (s·ªë l·∫ßn std dev)
            exit_threshold: Ng∆∞·ª°ng tho√°t l·ªánh (s·ªë l·∫ßn std dev)
        """
        super().__init__("Mean_Reversion")
        self.period = period
        self.entry_threshold = entry_threshold
        self.exit_threshold = exit_threshold
    
    def generate_signals(self, data: pd.DataFrame) -> List[StrategySignal]:
        """
        T·∫°o t√≠n hi·ªáu d·ª±a tr√™n mean reversion
        """
        signals = []
        
        # T√≠nh moving average v√† standard deviation
        data['ma'] = data['close'].rolling(window=self.period).mean()
        data['std'] = data['close'].rolling(window=self.period).std()
        data['z_score'] = (data['close'] - data['ma']) / data['std']
        
        for i in range(1, len(data)):
            if pd.isna(data['z_score'].iloc[i]):
                continue
            
            current_z = data['z_score'].iloc[i]
            prev_z = data['z_score'].iloc[i-1]
            current_price = data['close'].iloc[i]
            
            # Gi√° qu√° th·∫•p so v·ªõi trung b√¨nh -> BUY
            if prev_z <= -self.entry_threshold and current_z > -self.entry_threshold:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='BUY',
                    confidence=0.7,
                    price=current_price,
                    reason=f"Mean Reversion BUY: Z-Score {current_z:.2f} t·ª´ oversold"
                ))
            
            # Gi√° qu√° cao so v·ªõi trung b√¨nh -> SELL
            elif prev_z >= self.entry_threshold and current_z < self.entry_threshold:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='SELL',
                    confidence=0.7,
                    price=current_price,
                    reason=f"Mean Reversion SELL: Z-Score {current_z:.2f} t·ª´ overbought"
                ))
            
            # Tho√°t l·ªánh khi gi√° v·ªÅ g·∫ßn trung b√¨nh
            elif abs(prev_z) > self.exit_threshold and abs(current_z) <= self.exit_threshold:
                # T·∫°o t√≠n hi·ªáu HOLD ƒë·ªÉ ƒë√≥ng position
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='HOLD',
                    confidence=0.5,
                    price=current_price,
                    reason=f"Mean Reversion EXIT: Z-Score {current_z:.2f} v·ªÅ trung b√¨nh"
                ))
        
        return signals

class MomentumStrategy(TradingStrategy):
    """
    Chi·∫øn l∆∞·ª£c Momentum (Theo xu h∆∞·ªõng)
    """
    
    def __init__(self, period: int = 14, threshold: float = 0.02):
        """
        Kh·ªüi t·∫°o Momentum Strategy
        
        Args:
            period: Chu k·ª≥ t√≠nh momentum
            threshold: Ng∆∞·ª°ng momentum ƒë·ªÉ t·∫°o t√≠n hi·ªáu
        """
        super().__init__("Momentum")
        self.period = period
        self.threshold = threshold
    
    def generate_signals(self, data: pd.DataFrame) -> List[StrategySignal]:
        """
        T·∫°o t√≠n hi·ªáu d·ª±a tr√™n momentum
        """
        signals = []
        
        # T√≠nh momentum
        data['momentum'] = data['close'].pct_change(periods=self.period)
        data['momentum_sma'] = data['momentum'].rolling(window=5).mean()
        
        for i in range(1, len(data)):
            if pd.isna(data['momentum'].iloc[i]):
                continue
            
            current_momentum = data['momentum'].iloc[i]
            prev_momentum = data['momentum'].iloc[i-1]
            current_price = data['close'].iloc[i]
            
            # Momentum tƒÉng m·∫°nh -> BUY
            if prev_momentum <= self.threshold and current_momentum > self.threshold:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='BUY',
                    confidence=0.75,
                    price=current_price,
                    reason=f"Momentum BUY: {current_momentum:.2%} tƒÉng m·∫°nh"
                ))
            
            # Momentum gi·∫£m m·∫°nh -> SELL
            elif prev_momentum >= -self.threshold and current_momentum < -self.threshold:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='SELL',
                    confidence=0.75,
                    price=current_price,
                    reason=f"Momentum SELL: {current_momentum:.2%} gi·∫£m m·∫°nh"
                ))
        
        return signals

class BollingerBandsStrategy(TradingStrategy):
    """
    Chi·∫øn l∆∞·ª£c Bollinger Bands
    """
    
    def __init__(self, period: int = 20, std_dev: float = 2.0):
        """
        Kh·ªüi t·∫°o Bollinger Bands Strategy
        
        Args:
            period: Chu k·ª≥ moving average
            std_dev: S·ªë l·∫ßn ƒë·ªô l·ªách chu·∫©n
        """
        super().__init__("Bollinger_Bands")
        self.period = period
        self.std_dev = std_dev
    
    def generate_signals(self, data: pd.DataFrame) -> List[StrategySignal]:
        """
        T·∫°o t√≠n hi·ªáu d·ª±a tr√™n Bollinger Bands
        """
        signals = []
        
        # T√≠nh Bollinger Bands n·∫øu ch∆∞a c√≥
        if 'bb_upper' not in data.columns:
            self._calculate_bollinger_bands(data)
        
        close = data['close']
        bb_upper = data['bb_upper']
        bb_lower = data['bb_lower']
        bb_middle = data['bb_middle']
        
        for i in range(1, len(data)):
            if pd.isna(bb_upper.iloc[i]) or pd.isna(bb_lower.iloc[i]):
                continue
            
            current_price = close.iloc[i]
            prev_price = close.iloc[i-1]
            
            # Gi√° ch·∫°m lower band v√† b·∫≠t l√™n
            if prev_price <= bb_lower.iloc[i-1] and current_price > bb_lower.iloc[i]:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='BUY',
                    confidence=0.6,
                    price=current_price,
                    reason=f"BB Bounce t·ª´ Lower Band: {current_price:.1f}"
                ))
            
            # Gi√° ch·∫°m upper band v√† quay xu·ªëng
            elif prev_price >= bb_upper.iloc[i-1] and current_price < bb_upper.iloc[i]:
                signals.append(StrategySignal(
                    timestamp=data.index[i],
                    symbol=data.get('symbol', 'UNKNOWN')[0] if 'symbol' in data.columns else 'UNKNOWN',
                    signal_type='SELL',
                    confidence=0.6,
                    price=current_price,
                    reason=f"BB Reversal t·ª´ Upper Band: {current_price:.1f}"
                ))
        
        return signals
    
    def _calculate_bollinger_bands(self, data: pd.DataFrame):
        """T√≠nh Bollinger Bands"""
        data['bb_middle'] = data['close'].rolling(window=self.period).mean()
        std = data['close'].rolling(window=self.period).std()
        data['bb_upper'] = data['bb_middle'] + (std * self.std_dev)
        data['bb_lower'] = data['bb_middle'] - (std * self.std_dev)

class MultiSignalStrategy(TradingStrategy):
    """
    Chi·∫øn l∆∞·ª£c k·∫øt h·ª£p nhi·ªÅu t√≠n hi·ªáu
    """
    
    def __init__(self, strategies: List[TradingStrategy], min_signals: int = 2):
        """
        Kh·ªüi t·∫°o Multi-Signal Strategy
        
        Args:
            strategies: List c√°c chi·∫øn l∆∞·ª£c con
            min_signals: S·ªë t√≠n hi·ªáu t·ªëi thi·ªÉu ƒë·ªÉ trade
        """
        super().__init__("Multi_Signal")
        self.strategies = strategies
        self.min_signals = min_signals
    
    def generate_signals(self, data: pd.DataFrame) -> List[StrategySignal]:
        """
        T·∫°o t√≠n hi·ªáu b·∫±ng c√°ch k·∫øt h·ª£p c√°c chi·∫øn l∆∞·ª£c con
        """
        all_signals = []
        
        # Thu th·∫≠p t√≠n hi·ªáu t·ª´ t·∫•t c·∫£ strategies
        for strategy in self.strategies:
            strategy_signals = strategy.generate_signals(data.copy())
            all_signals.extend(strategy_signals)
        
        # Group signals by timestamp v√† type
        signal_groups = {}
        for signal in all_signals:
            key = (signal.timestamp, signal.signal_type)
            if key not in signal_groups:
                signal_groups[key] = []
            signal_groups[key].append(signal)
        
        # T·∫°o combined signals
        combined_signals = []
        for (timestamp, signal_type), signals in signal_groups.items():
            if len(signals) >= self.min_signals:
                # T√≠nh confidence trung b√¨nh
                avg_confidence = np.mean([s.confidence for s in signals])
                
                # T·∫°o combined signal
                combined_signals.append(StrategySignal(
                    timestamp=timestamp,
                    symbol=signals[0].symbol,
                    signal_type=signal_type,
                    confidence=min(avg_confidence * 1.2, 1.0),  # Boost confidence
                    price=signals[0].price,
                    reason=f"Multi-signal ({len(signals)} strategies): " + 
                           ", ".join([s.reason.split(':')[0] for s in signals])
                ))
        
        return combined_signals

class StrategyOptimizer:
    """
    Optimizer ƒë·ªÉ t√¨m tham s·ªë t·ªët nh·∫•t cho chi·∫øn l∆∞·ª£c
    """
    
    def __init__(self, engine: BacktestingEngine):
        """
        Kh·ªüi t·∫°o Strategy Optimizer
        
        Args:
            engine: BacktestingEngine instance
        """
        self.engine = engine
        self.logger = logging.getLogger(__name__)
    
    def optimize_ma_crossover(self, data: pd.DataFrame, 
                            fast_range: Tuple[int, int] = (5, 20),
                            slow_range: Tuple[int, int] = (20, 50)) -> Dict[str, Any]:
        """
        Optimize MA Crossover strategy parameters
        
        Args:
            data: D·ªØ li·ªáu ƒë·ªÉ test
            fast_range: Range cho fast MA
            slow_range: Range cho slow MA
            
        Returns:
            Dict k·∫øt qu·∫£ optimization
        """
        best_params = {}
        best_return = -np.inf
        results = []
        
        for fast in range(fast_range[0], fast_range[1] + 1, 2):
            for slow in range(slow_range[0], slow_range[1] + 1, 5):
                if fast >= slow:
                    continue
                
                # Reset engine
                self.engine.reset()
                
                # Test strategy
                strategy = MovingAverageCrossoverStrategy(fast, slow)
                signals = strategy.generate_signals(data.copy())
                
                # Execute signals
                for signal in signals:
                    if signal.signal_type == 'BUY':
                        self.engine.place_order(
                            signal.timestamp, signal.symbol,
                            OrderType.BUY, 1000, signal.price
                        )
                    elif signal.signal_type == 'SELL':
                        self.engine.place_order(
                            signal.timestamp, signal.symbol,
                            OrderType.SELL, 1000, signal.price
                        )
                
                # Calculate performance
                metrics = self.engine.calculate_performance_metrics()
                
                results.append({
                    'fast_ma': fast,
                    'slow_ma': slow,
                    'total_return': metrics.total_return,
                    'sharpe_ratio': metrics.sharpe_ratio,
                    'max_drawdown': metrics.max_drawdown,
                    'win_rate': metrics.win_rate
                })
                
                if metrics.total_return > best_return:
                    best_return = metrics.total_return
                    best_params = {'fast': fast, 'slow': slow}
        
        return {
            'best_params': best_params,
            'best_return': best_return,
            'all_results': pd.DataFrame(results)
        }

# Test module
if __name__ == "__main__":
    """
    Test c√°c strategies
    """
    import logging
    logging.basicConfig(level=logging.INFO)
    
    print("üß™ Testing Trading Strategies...")
    
    # T·∫°o d·ªØ li·ªáu test
    dates = pd.date_range('2024-01-01', '2024-12-31', freq='D')
    np.random.seed(42)
    
    test_data = pd.DataFrame({
        'open': 100 + np.random.randn(len(dates)).cumsum() * 0.5,
        'high': 0,
        'low': 0,
        'close': 0,
        'volume': np.random.randint(1000000, 5000000, len(dates)),
        'symbol': 'TEST'
    }, index=dates)
    
    test_data['high'] = test_data['open'] + np.random.uniform(0.5, 2, len(dates))
    test_data['low'] = test_data['open'] - np.random.uniform(0.5, 2, len(dates))
    test_data['close'] = test_data['low'] + (test_data['high'] - test_data['low']) * np.random.random(len(dates))
    
    # Test MA Crossover Strategy
    print("\nüìä Testing MA Crossover Strategy...")
    ma_strategy = MovingAverageCrossoverStrategy(fast_period=10, slow_period=20)
    ma_signals = ma_strategy.generate_signals(test_data.copy())
    print(f"‚úÖ Generated {len(ma_signals)} MA signals")
    
    # Test RSI Strategy
    print("\nüìä Testing RSI Strategy...")
    rsi_strategy = RSIStrategy(period=14)
    rsi_signals = rsi_strategy.generate_signals(test_data.copy())
    print(f"‚úÖ Generated {len(rsi_signals)} RSI signals")
    
    # Test MACD Strategy
    print("\nüìä Testing MACD Strategy...")
    macd_strategy = MACDStrategy()
    macd_signals = macd_strategy.generate_signals(test_data.copy())
    print(f"‚úÖ Generated {len(macd_signals)} MACD signals")
    
    # Test Mean Reversion Strategy
    print("\nüìä Testing Mean Reversion Strategy...")
    mean_reversion_strategy = MeanReversionStrategy(period=20)
    mean_reversion_signals = mean_reversion_strategy.generate_signals(test_data.copy())
    print(f"‚úÖ Generated {len(mean_reversion_signals)} Mean Reversion signals")
    
    # Test Momentum Strategy
    print("\nüìä Testing Momentum Strategy...")
    momentum_strategy = MomentumStrategy(period=14)
    momentum_signals = momentum_strategy.generate_signals(test_data.copy())
    print(f"‚úÖ Generated {len(momentum_signals)} Momentum signals")
    
    # Test Bollinger Bands Strategy
    print("\nüìä Testing Bollinger Bands Strategy...")
    bb_strategy = BollingerBandsStrategy(period=20)
    bb_signals = bb_strategy.generate_signals(test_data.copy())
    print(f"‚úÖ Generated {len(bb_signals)} Bollinger Bands signals")
    
    # Test Multi-Signal Strategy
    print("\nüìä Testing Multi-Signal Strategy...")
    multi_strategy = MultiSignalStrategy([ma_strategy, rsi_strategy, macd_strategy, mean_reversion_strategy], min_signals=2)
    multi_signals = multi_strategy.generate_signals(test_data.copy())
    print(f"‚úÖ Generated {len(multi_signals)} Multi-Signal signals")
    
    print("‚úÖ All strategy tests completed!")
