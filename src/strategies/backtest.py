"""
üîÑ BACKTESTING SYSTEM - H·ªá th·ªëng backtest chi·∫øn l∆∞·ª£c
================================================

Module n√†y th·ª±c hi·ªán backtest c√°c chi·∫øn l∆∞·ª£c giao d·ªãch
"""

import pandas as pd
import numpy as np
import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum

class OrderType(Enum):
    """
    Lo·∫°i l·ªánh giao d·ªãch
    """
    BUY = "BUY"
    SELL = "SELL"

class OrderStatus(Enum):
    """
    Tr·∫°ng th√°i l·ªánh
    """
    PENDING = "PENDING"
    EXECUTED = "EXECUTED"
    CANCELLED = "CANCELLED"

@dataclass
class Order:
    """
    L·ªánh giao d·ªãch
    """
    symbol: str
    order_type: OrderType
    quantity: int
    price: float
    timestamp: datetime
    status: OrderStatus = OrderStatus.PENDING
    executed_price: Optional[float] = None
    executed_time: Optional[datetime] = None

@dataclass
class Position:
    """
    V·ªã th·∫ø giao d·ªãch
    """
    symbol: str
    quantity: int
    avg_price: float
    current_price: float
    unrealized_pnl: float
    realized_pnl: float

@dataclass
class BacktestResult:
    """
    K·∫øt qu·∫£ backtest
    """
    total_return: float
    annualized_return: float
    max_drawdown: float
    sharpe_ratio: float
    win_rate: float
    profit_factor: float
    total_trades: int
    winning_trades: int
    losing_trades: int
    avg_win: float
    avg_loss: float
    trades_df: pd.DataFrame
    equity_curve: pd.DataFrame

class BacktestEngine:
    """
    Engine th·ª±c hi·ªán backtest
    """
    
    def __init__(self, initial_capital: float = 100000000):  # 100M VND
        """
        Kh·ªüi t·∫°o BacktestEngine
        
        Args:
            initial_capital: V·ªën ban ƒë·∫ßu (VND)
        """
        self.initial_capital = initial_capital
        self.current_capital = initial_capital
        self.positions = {}
        self.orders = []
        self.trades = []
        self.equity_curve = []
        
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"üîÑ BacktestEngine ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi v·ªën: {initial_capital:,.0f} VND")
    
    def reset(self):
        """
        Reset engine v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
        """
        self.current_capital = self.initial_capital
        self.positions = {}
        self.orders = []
        self.trades = []
        self.equity_curve = []
        self.logger.info("üîÑ Engine ƒë√£ ƒë∆∞·ª£c reset")
    
    def run_backtest(self, df: pd.DataFrame, strategy_func: callable,
                    commission: float = 0.0015) -> BacktestResult:
        """
        Ch·∫°y backtest v·ªõi chi·∫øn l∆∞·ª£c
        
        Args:
            df: DataFrame ch·ª©a d·ªØ li·ªáu v√† t√≠n hi·ªáu
            strategy_func: H√†m chi·∫øn l∆∞·ª£c tr·∫£ v·ªÅ t√≠n hi·ªáu
            commission: Ph√≠ giao d·ªãch (%)
            
        Returns:
            BacktestResult object
        """
        self.reset()
        self.commission = commission
        
        if len(df) == 0:
            self.logger.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ backtest")
            return None
        
        symbol = 'STOCK'  # Default symbol
        
        # Iterate through each day
        for i in range(len(df)):
            current_row = df.iloc[i]
            current_date = current_row.get('time', datetime.now())
            current_price = current_row['close']
            
            # Update portfolio value
            portfolio_value = self.calculate_portfolio_value(current_price, symbol)
            self.equity_curve.append({
                'date': current_date,
                'portfolio_value': portfolio_value,
                'cash': self.current_capital,
                'stock_value': portfolio_value - self.current_capital
            })
            
            # Get strategy signal
            signal = strategy_func(df.iloc[:i+1], i)
            
            # Execute trades based on signal
            if signal == 'BUY':
                self.buy_stock(symbol, current_price, current_date)
            elif signal == 'SELL':
                self.sell_stock(symbol, current_price, current_date)
        
        # Calculate final results
        return self.calculate_results(df, symbol)
    
    def buy_stock(self, symbol: str, price: float, timestamp: datetime,
                 amount: Optional[float] = None):
        """
        Mua c·ªï phi·∫øu
        
        Args:
            symbol: M√£ c·ªï phi·∫øu
            price: Gi√° mua
            timestamp: Th·ªùi gian
            amount: S·ªë ti·ªÅn mua (None = mua h·∫øt ti·ªÅn c√≥)
        """
        if amount is None:
            amount = self.current_capital * 0.95  # ƒê·ªÉ l·∫°i 5% cash
        
        if amount > self.current_capital:
            self.logger.warning(f"‚ö†Ô∏è Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua {symbol}")
            return
        
        quantity = int(amount / (price * (1 + self.commission)))
        if quantity <= 0:
            return
        
        total_cost = quantity * price * (1 + self.commission)
        
        # Create order
        order = Order(
            symbol=symbol,
            order_type=OrderType.BUY,
            quantity=quantity,
            price=price,
            timestamp=timestamp,
            status=OrderStatus.EXECUTED,
            executed_price=price,
            executed_time=timestamp
        )
        self.orders.append(order)
        
        # Update position
        if symbol in self.positions:
            current_pos = self.positions[symbol]
            total_quantity = current_pos.quantity + quantity
            total_value = (current_pos.quantity * current_pos.avg_price) + (quantity * price)
            new_avg_price = total_value / total_quantity
            
            self.positions[symbol] = Position(
                symbol=symbol,
                quantity=total_quantity,
                avg_price=new_avg_price,
                current_price=price,
                unrealized_pnl=0,
                realized_pnl=current_pos.realized_pnl
            )
        else:
            self.positions[symbol] = Position(
                symbol=symbol,
                quantity=quantity,
                avg_price=price,
                current_price=price,
                unrealized_pnl=0,
                realized_pnl=0
            )
        
        # Update capital
        self.current_capital -= total_cost
        
        self.logger.debug(f"‚úÖ Mua {quantity} c·ªï phi·∫øu {symbol} @ {price:,.0f}")
    
    def sell_stock(self, symbol: str, price: float, timestamp: datetime,
                  quantity: Optional[int] = None):
        """
        B√°n c·ªï phi·∫øu
        
        Args:
            symbol: M√£ c·ªï phi·∫øu
            price: Gi√° b√°n
            timestamp: Th·ªùi gian
            quantity: S·ªë l∆∞·ª£ng b√°n (None = b√°n h·∫øt)
        """
        if symbol not in self.positions or self.positions[symbol].quantity <= 0:
            self.logger.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ c·ªï phi·∫øu {symbol} ƒë·ªÉ b√°n")
            return
        
        current_pos = self.positions[symbol]
        
        if quantity is None or quantity > current_pos.quantity:
            quantity = current_pos.quantity
        
        total_revenue = quantity * price * (1 - self.commission)
        cost_basis = quantity * current_pos.avg_price
        realized_pnl = total_revenue - cost_basis
        
        # Create order
        order = Order(
            symbol=symbol,
            order_type=OrderType.SELL,
            quantity=quantity,
            price=price,
            timestamp=timestamp,
            status=OrderStatus.EXECUTED,
            executed_price=price,
            executed_time=timestamp
        )
        self.orders.append(order)
        
        # Record trade
        trade = {
            'symbol': symbol,
            'entry_date': None,  # Would need to track this
            'exit_date': timestamp,
            'entry_price': current_pos.avg_price,
            'exit_price': price,
            'quantity': quantity,
            'pnl': realized_pnl,
            'return_pct': (price / current_pos.avg_price - 1) * 100
        }
        self.trades.append(trade)
        
        # Update position
        remaining_quantity = current_pos.quantity - quantity
        if remaining_quantity > 0:
            self.positions[symbol] = Position(
                symbol=symbol,
                quantity=remaining_quantity,
                avg_price=current_pos.avg_price,
                current_price=price,
                unrealized_pnl=0,
                realized_pnl=current_pos.realized_pnl + realized_pnl
            )
        else:
            del self.positions[symbol]
        
        # Update capital
        self.current_capital += total_revenue
        
        self.logger.debug(f"‚úÖ B√°n {quantity} c·ªï phi·∫øu {symbol} @ {price:,.0f}, PnL: {realized_pnl:,.0f}")
    
    def calculate_portfolio_value(self, current_price: float, symbol: str) -> float:
        """
        T√≠nh gi√° tr·ªã danh m·ª•c
        
        Args:
            current_price: Gi√° hi·ªán t·∫°i
            symbol: M√£ c·ªï phi·∫øu
            
        Returns:
            T·ªïng gi√° tr·ªã danh m·ª•c
        """
        total_value = self.current_capital
        
        if symbol in self.positions:
            position = self.positions[symbol]
            stock_value = position.quantity * current_price
            total_value += stock_value
        
        return total_value
    
    def calculate_results(self, df: pd.DataFrame, symbol: str) -> BacktestResult:
        """
        T√≠nh to√°n k·∫øt qu·∫£ backtest
        
        Args:
            df: DataFrame d·ªØ li·ªáu
            symbol: M√£ c·ªï phi·∫øu
            
        Returns:
            BacktestResult object
        """
        if len(self.equity_curve) == 0:
            self.logger.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu equity curve")
            return None
        
        equity_df = pd.DataFrame(self.equity_curve)
        trades_df = pd.DataFrame(self.trades) if self.trades else pd.DataFrame()
        
        # Calculate returns
        final_value = equity_df['portfolio_value'].iloc[-1]
        total_return = (final_value / self.initial_capital - 1) * 100
        
        # Calculate annualized return
        days = len(equity_df)
        years = days / 365.25
        annualized_return = ((final_value / self.initial_capital) ** (1/years) - 1) * 100 if years > 0 else 0
        
        # Calculate max drawdown
        equity_df['peak'] = equity_df['portfolio_value'].cummax()
        equity_df['drawdown'] = (equity_df['portfolio_value'] / equity_df['peak'] - 1) * 100
        max_drawdown = equity_df['drawdown'].min()
        
        # Calculate Sharpe ratio (simplified)
        if len(equity_df) > 1:
            returns = equity_df['portfolio_value'].pct_change().dropna()
            if returns.std() > 0:
                sharpe_ratio = (returns.mean() * 252) / (returns.std() * np.sqrt(252))  # Annualized
            else:
                sharpe_ratio = 0
        else:
            sharpe_ratio = 0
        
        # Trade statistics
        if len(trades_df) > 0:
            winning_trades = len(trades_df[trades_df['pnl'] > 0])
            losing_trades = len(trades_df[trades_df['pnl'] < 0])
            total_trades = len(trades_df)
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            
            avg_win = trades_df[trades_df['pnl'] > 0]['pnl'].mean() if winning_trades > 0 else 0
            avg_loss = trades_df[trades_df['pnl'] < 0]['pnl'].mean() if losing_trades > 0 else 0
            
            if avg_loss != 0:
                profit_factor = abs(avg_win * winning_trades / (avg_loss * losing_trades))
            else:
                profit_factor = float('inf') if avg_win > 0 else 0
        else:
            winning_trades = losing_trades = total_trades = 0
            win_rate = avg_win = avg_loss = profit_factor = 0
        
        result = BacktestResult(
            total_return=total_return,
            annualized_return=annualized_return,
            max_drawdown=max_drawdown,
            sharpe_ratio=sharpe_ratio,
            win_rate=win_rate,
            profit_factor=profit_factor,
            total_trades=total_trades,
            winning_trades=winning_trades,
            losing_trades=losing_trades,
            avg_win=avg_win,
            avg_loss=avg_loss,
            trades_df=trades_df,
            equity_curve=equity_df
        )
        
        self.logger.info(f"‚úÖ Backtest ho√†n th√†nh: Return {total_return:.2f}%, Max DD {max_drawdown:.2f}%")
        
        return result
    
    def print_results(self, result: BacktestResult):
        """
        In k·∫øt qu·∫£ backtest
        
        Args:
            result: BacktestResult object
        """
        print("="*60)
        print("üìä K·∫æT QU·∫¢ BACKTEST")
        print("="*60)
        print(f"üí∞ V·ªën ban ƒë·∫ßu: {self.initial_capital:,.0f} VND")
        print(f"üí∞ V·ªën cu·ªëi k·ª≥: {result.equity_curve['portfolio_value'].iloc[-1]:,.0f} VND")
        print(f"üìà T·ªïng l·ª£i nhu·∫≠n: {result.total_return:.2f}%")
        print(f"üìà L·ª£i nhu·∫≠n h√†ng nƒÉm: {result.annualized_return:.2f}%")
        print(f"üìâ Max Drawdown: {result.max_drawdown:.2f}%")
        print(f"üìä Sharpe Ratio: {result.sharpe_ratio:.2f}")
        print(f"üéØ T·ª∑ l·ªá th·∫Øng: {result.win_rate:.1f}%")
        print(f"üìä Profit Factor: {result.profit_factor:.2f}")
        print(f"üîÑ T·ªïng s·ªë giao d·ªãch: {result.total_trades}")
        print(f"‚úÖ Giao d·ªãch th·∫Øng: {result.winning_trades}")
        print(f"‚ùå Giao d·ªãch thua: {result.losing_trades}")
        print(f"üíö L√£i trung b√¨nh: {result.avg_win:,.0f} VND")
        print(f"üíî L·ªó trung b√¨nh: {result.avg_loss:,.0f} VND")
        print("="*60)

class StrategyLibrary:
    """
    Th∆∞ vi·ªán c√°c chi·∫øn l∆∞·ª£c giao d·ªãch
    """
    
    @staticmethod
    def golden_cross_strategy(df: pd.DataFrame, index: int) -> str:
        """
        Chi·∫øn l∆∞·ª£c Golden Cross (SMA 50 > SMA 200)
        
        Args:
            df: DataFrame d·ªØ li·ªáu
            index: Ch·ªâ s·ªë hi·ªán t·∫°i
            
        Returns:
            T√≠n hi·ªáu: 'BUY', 'SELL', ho·∫∑c 'HOLD'
        """
        if index < 200:  # Ch∆∞a ƒë·ªß d·ªØ li·ªáu
            return 'HOLD'
        
        current = df.iloc[index]
        previous = df.iloc[index-1]
        
        # Golden Cross: SMA 50 v∆∞·ª£t l√™n SMA 200
        if ('sma_50' in df.columns and 'sma_200' in df.columns):
            if (current['sma_50'] > current['sma_200'] and 
                previous['sma_50'] <= previous['sma_200']):
                return 'BUY'
            
            # Death Cross: SMA 50 xu·ªëng d∆∞·ªõi SMA 200
            elif (current['sma_50'] < current['sma_200'] and 
                  previous['sma_50'] >= previous['sma_200']):
                return 'SELL'
        
        return 'HOLD'
    
    @staticmethod
    def rsi_strategy(df: pd.DataFrame, index: int) -> str:
        """
        Chi·∫øn l∆∞·ª£c RSI
        
        Args:
            df: DataFrame d·ªØ li·ªáu
            index: Ch·ªâ s·ªë hi·ªán t·∫°i
            
        Returns:
            T√≠n hi·ªáu: 'BUY', 'SELL', ho·∫∑c 'HOLD'
        """
        if index < 14 or 'rsi' not in df.columns:
            return 'HOLD'
        
        current_rsi = df.iloc[index]['rsi']
        previous_rsi = df.iloc[index-1]['rsi']
        
        # Mua khi RSI v∆∞·ª£t l√™n 30 (tho√°t v√πng oversold)
        if current_rsi > 30 and previous_rsi <= 30:
            return 'BUY'
        
        # B√°n khi RSI xu·ªëng d∆∞·ªõi 70 (tho√°t v√πng overbought)
        elif current_rsi < 70 and previous_rsi >= 70:
            return 'SELL'
        
        return 'HOLD'
    
    @staticmethod
    def macd_strategy(df: pd.DataFrame, index: int) -> str:
        """
        Chi·∫øn l∆∞·ª£c MACD
        
        Args:
            df: DataFrame d·ªØ li·ªáu
            index: Ch·ªâ s·ªë hi·ªán t·∫°i
            
        Returns:
            T√≠n hi·ªáu: 'BUY', 'SELL', ho·∫∑c 'HOLD'
        """
        if (index < 26 or 'macd' not in df.columns or 
            'macd_signal' not in df.columns):
            return 'HOLD'
        
        current = df.iloc[index]
        previous = df.iloc[index-1]
        
        # MACD v∆∞·ª£t l√™n Signal line
        if (current['macd'] > current['macd_signal'] and 
            previous['macd'] <= previous['macd_signal']):
            return 'BUY'
        
        # MACD xu·ªëng d∆∞·ªõi Signal line
        elif (current['macd'] < current['macd_signal'] and 
              previous['macd'] >= previous['macd_signal']):
            return 'SELL'
        
        return 'HOLD'
    
    @staticmethod
    def bollinger_bands_strategy(df: pd.DataFrame, index: int) -> str:
        """
        Chi·∫øn l∆∞·ª£c Bollinger Bands
        
        Args:
            df: DataFrame d·ªØ li·ªáu
            index: Ch·ªâ s·ªë hi·ªán t·∫°i
            
        Returns:
            T√≠n hi·ªáu: 'BUY', 'SELL', ho·∫∑c 'HOLD'
        """
        if (index < 20 or not all(col in df.columns for col in 
                                 ['bb_upper', 'bb_lower', 'close'])):
            return 'HOLD'
        
        current = df.iloc[index]
        previous = df.iloc[index-1]
        
        # Mua khi gi√° ch·∫°m lower band r·ªìi h·ªìi ph·ª•c
        if (previous['close'] <= previous['bb_lower'] and 
            current['close'] > current['bb_lower']):
            return 'BUY'
        
        # B√°n khi gi√° ch·∫°m upper band
        elif current['close'] >= current['bb_upper']:
            return 'SELL'
        
        return 'HOLD'

# Test module
if __name__ == "__main__":
    """
    Test BacktestEngine
    """
    import sys
    import os
    
    # Add parent directory to path
    sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    
    # Setup logging
    logging.basicConfig(level=logging.INFO)
    
    # Create sample data
    dates = pd.date_range('2024-01-01', periods=252, freq='D')  # 1 year
    np.random.seed(42)
    
    # Generate sample OHLCV data
    close_prices = 50000 + np.cumsum(np.random.randn(252) * 500)  # VND prices
    high_prices = close_prices + np.random.rand(252) * 1000
    low_prices = close_prices - np.random.rand(252) * 1000
    open_prices = close_prices + np.random.randn(252) * 200
    volumes = np.random.randint(100000, 1000000, 252)
    
    df = pd.DataFrame({
        'time': dates,
        'open': open_prices,
        'high': high_prices,
        'low': low_prices,
        'close': close_prices,
        'volume': volumes
    })
    
    # Add indicators
    df['sma_50'] = df['close'].rolling(50).mean()
    df['sma_200'] = df['close'].rolling(200).mean()
    df['rsi'] = 50 + np.random.randn(252) * 20
    
    print("üß™ Testing BacktestEngine...")
    
    # Test Golden Cross strategy
    engine = BacktestEngine(initial_capital=100_000_000)  # 100M VND
    result = engine.run_backtest(df, StrategyLibrary.golden_cross_strategy)
    
    if result:
        engine.print_results(result)
        print(f"‚úÖ Equity curve points: {len(result.equity_curve)}")
        print(f"‚úÖ Total trades: {len(result.trades_df)}")
    
    print("‚úÖ Test completed!")
