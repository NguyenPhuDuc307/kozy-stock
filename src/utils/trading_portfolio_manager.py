"""
üìä TRADING PORTFOLIO MANAGER
============================

Qu·∫£n l√Ω nhi·ªÅu danh m·ª•c giao d·ªãch (CRUD) ƒë·ªÉ t·ªï ch·ª©c c√°c giao d·ªãch theo t·ª´ng chi·∫øn l∆∞·ª£c kh√°c nhau
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional
import pandas as pd
from .trading_history import TradingHistory

class TradingPortfolioManager:
    """
    Qu·∫£n l√Ω nhi·ªÅu danh m·ª•c giao d·ªãch kh√°c nhau
    """
    
    def __init__(self, data_file: str = "trading_portfolios.json"):
        """
        Kh·ªüi t·∫°o trading portfolio manager
        
        Args:
            data_file: T√™n file l∆∞u tr·ªØ th√¥ng tin c√°c danh m·ª•c giao d·ªãch
        """
        self.data_file = data_file
        self.portfolios_data = self._load_portfolios()
        self._portfolio_instances = {}  # Cache cho c√°c instance TradingHistory
    
    def _load_portfolios(self) -> Dict:
        """T·∫£i th√¥ng tin c√°c danh m·ª•c t·ª´ file"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                return {"portfolios": {}}
        else:
            return {"portfolios": {}}
    
    def _save_portfolios(self):
        """L∆∞u th√¥ng tin c√°c danh m·ª•c v√†o file"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.portfolios_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"L·ªói l∆∞u file danh m·ª•c: {e}")
    
    def create_portfolio(self, name: str, description: str = "", 
                        initial_cash: float = 0.0, strategy: str = "") -> str:
        """
        T·∫°o danh m·ª•c giao d·ªãch m·ªõi
        
        Args:
            name: T√™n danh m·ª•c
            description: M√¥ t·∫£ danh m·ª•c
            initial_cash: S·ªë ti·ªÅn ban ƒë·∫ßu
            strategy: Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞
            
        Returns:
            portfolio_id: ID c·ªßa danh m·ª•c v·ª´a t·∫°o
        """
        # T·∫°o ID duy nh·∫•t cho danh m·ª•c
        portfolio_id = f"portfolio_{len(self.portfolios_data['portfolios']) + 1}_{int(datetime.now().timestamp())}"
        
        # T·∫°o file ri√™ng cho l·ªãch s·ª≠ giao d·ªãch c·ªßa danh m·ª•c n√†y
        trading_file = f"trading_history_{portfolio_id}.json"
        
        portfolio_info = {
            "id": portfolio_id,
            "name": name,
            "description": description,
            "initial_cash": initial_cash,
            "current_cash": initial_cash,
            "strategy": strategy,
            "created_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "last_updated": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "trading_file": trading_file,
            "is_active": True,
            "total_invested": 0.0,
            "total_profit_loss": 0.0,
            "total_value": initial_cash
        }
        
        # L∆∞u th√¥ng tin danh m·ª•c
        self.portfolios_data["portfolios"][portfolio_id] = portfolio_info
        self._save_portfolios()
        
        # T·∫°o instance TradingHistory cho danh m·ª•c n√†y
        self._portfolio_instances[portfolio_id] = TradingHistory(trading_file)
        
        return portfolio_id
    
    def get_portfolios(self) -> List[Dict]:
        """L·∫•y danh s√°ch t·∫•t c·∫£ danh m·ª•c"""
        portfolios = []
        for portfolio_id, info in self.portfolios_data["portfolios"].items():
            if info.get("is_active", True):
                # C·∫≠p nh·∫≠t th·ªëng k√™
                self._update_portfolio_stats(portfolio_id)
                portfolios.append(info.copy())
        
        return portfolios
    
    def get_portfolio(self, portfolio_id: str) -> Optional[Dict]:
        """
        L·∫•y th√¥ng tin m·ªôt danh m·ª•c c·ª• th·ªÉ
        
        Args:
            portfolio_id: ID c·ªßa danh m·ª•c
            
        Returns:
            Th√¥ng tin danh m·ª•c ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        if portfolio_id in self.portfolios_data["portfolios"]:
            portfolio_info = self.portfolios_data["portfolios"][portfolio_id].copy()
            if portfolio_info.get("is_active", True):
                self._update_portfolio_stats(portfolio_id)
                return portfolio_info
        return None
    
    def update_portfolio(self, portfolio_id: str, name: str = None, 
                        description: str = None, strategy: str = None) -> bool:
        """
        C·∫≠p nh·∫≠t th√¥ng tin danh m·ª•c
        
        Args:
            portfolio_id: ID c·ªßa danh m·ª•c
            name: T√™n m·ªõi (n·∫øu c√≥)
            description: M√¥ t·∫£ m·ªõi (n·∫øu c√≥)
            strategy: Chi·∫øn l∆∞·ª£c m·ªõi (n·∫øu c√≥)
            
        Returns:
            True n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if portfolio_id not in self.portfolios_data["portfolios"]:
            return False
        
        portfolio = self.portfolios_data["portfolios"][portfolio_id]
        
        if name is not None:
            portfolio["name"] = name
        if description is not None:
            portfolio["description"] = description
        if strategy is not None:
            portfolio["strategy"] = strategy
        
        portfolio["last_updated"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        self._save_portfolios()
        return True
    
    def delete_portfolio(self, portfolio_id: str) -> bool:
        """
        X√≥a danh m·ª•c (soft delete - ƒë√°nh d·∫•u is_active = False)
        
        Args:
            portfolio_id: ID c·ªßa danh m·ª•c c·∫ßn x√≥a
            
        Returns:
            True n·∫øu x√≥a th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if portfolio_id not in self.portfolios_data["portfolios"]:
            return False
        
        # Soft delete
        self.portfolios_data["portfolios"][portfolio_id]["is_active"] = False
        self.portfolios_data["portfolios"][portfolio_id]["last_updated"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # X√≥a kh·ªèi cache
        if portfolio_id in self._portfolio_instances:
            del self._portfolio_instances[portfolio_id]
        
        self._save_portfolios()
        return True
    
    def get_trading_history(self, portfolio_id: str) -> Optional[TradingHistory]:
        """
        L·∫•y instance TradingHistory c·ªßa m·ªôt danh m·ª•c
        
        Args:
            portfolio_id: ID c·ªßa danh m·ª•c
            
        Returns:
            Instance TradingHistory ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        if portfolio_id not in self.portfolios_data["portfolios"]:
            return None
        
        portfolio = self.portfolios_data["portfolios"][portfolio_id]
        if not portfolio.get("is_active", True):
            return None
        
        # Ki·ªÉm tra cache
        if portfolio_id not in self._portfolio_instances:
            trading_file = portfolio["trading_file"]
            self._portfolio_instances[portfolio_id] = TradingHistory(trading_file)
        
        return self._portfolio_instances[portfolio_id]
    
    def add_transaction(self, portfolio_id: str, symbol: str, transaction_type: str,
                       quantity: int, price: float, date: str = None,
                       fee: float = 0.0, note: str = "") -> Optional[int]:
        """
        Th√™m giao d·ªãch v√†o danh m·ª•c c·ª• th·ªÉ
        
        Args:
            portfolio_id: ID c·ªßa danh m·ª•c
            symbol: M√£ c·ªï phi·∫øu
            transaction_type: 'BUY' ho·∫∑c 'SELL'
            quantity: S·ªë l∆∞·ª£ng
            price: Gi√°
            date: Ng√†y giao d·ªãch
            fee: Ph√≠ giao d·ªãch
            note: Ghi ch√∫
            
        Returns:
            Transaction ID n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        trading_history = self.get_trading_history(portfolio_id)
        if trading_history is None:
            return None
        
        # Th√™m giao d·ªãch
        transaction_id = trading_history.add_transaction(
            symbol, transaction_type, quantity, price, date, fee, note
        )
        
        # C·∫≠p nh·∫≠t th·ªëng k√™ danh m·ª•c
        self._update_portfolio_stats(portfolio_id)
        
        return transaction_id
    
    def clear_symbol_transactions(self, portfolio_id: str, symbol: str) -> bool:
        """
        X√≥a t·∫•t c·∫£ giao d·ªãch c·ªßa m·ªôt m√£ c·ªï phi·∫øu trong danh m·ª•c c·ª• th·ªÉ
        
        Args:
            portfolio_id: ID c·ªßa danh m·ª•c
            symbol: M√£ c·ªï phi·∫øu c·∫ßn x√≥a
            
        Returns:
            True n·∫øu x√≥a th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        trading_history = self.get_trading_history(portfolio_id)
        if trading_history is None:
            return False
        
        # X√≥a giao d·ªãch c·ªßa symbol
        result = trading_history.clear_symbol_transactions(symbol)
        
        if result:
            # C·∫≠p nh·∫≠t th·ªëng k√™ danh m·ª•c
            self._update_portfolio_stats(portfolio_id)
        
        return result
    
    def _update_portfolio_stats(self, portfolio_id: str):
        """C·∫≠p nh·∫≠t th·ªëng k√™ c·ªßa danh m·ª•c"""
        if portfolio_id not in self.portfolios_data["portfolios"]:
            return
        
        trading_history = self.get_trading_history(portfolio_id)
        if trading_history is None:
            return
        
        portfolio = self.portfolios_data["portfolios"][portfolio_id]
        
        # T√≠nh t·ªïng ƒë·∫ßu t∆∞ v√† s·ªë d∆∞ hi·ªán t·∫°i
        total_invested = 0.0
        total_current_value = 0.0
        
        holdings = trading_history.get_current_holdings()
        for symbol, data in holdings.items():
            total_invested += data["total_cost"]
            
            # L·∫•y gi√° hi·ªán t·∫°i th·ª±c t·∫ø t·ª´ API
            try:
                # Import vnstock ƒë·ªÉ l·∫•y gi√° hi·ªán t·∫°i
                import vnstock as vn
                from datetime import datetime as dt, timedelta
                
                # L·∫•y d·ªØ li·ªáu gi√° g·∫ßn nh·∫•t
                end_date = dt.now()
                start_date = end_date - timedelta(days=7)  # L·∫•y 7 ng√†y g·∫ßn nh·∫•t
                
                # S·ª≠ d·ª•ng API ƒë√∫ng c·ªßa vnstock 4.x
                quote = vn.Quote(symbol=symbol, source='VCI')
                stock_data = quote.history(
                    start=start_date.strftime('%Y-%m-%d'),
                    end=end_date.strftime('%Y-%m-%d')
                )
                
                if stock_data is not None and not stock_data.empty:
                    # API tr·∫£ v·ªÅ gi√° theo ngh√¨n VND, c·∫ßn nh√¢n 1000 ƒë·ªÉ v·ªÅ VND ƒë·∫ßy ƒë·ªß
                    api_price = stock_data['close'].iloc[-1]
                    current_price = api_price * 1000
                    total_current_value += data["shares"] * current_price
                else:
                    # Fallback s·ª≠ d·ª•ng avg_price n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° m·ªõi
                    total_current_value += data["shares"] * data["avg_price"]
                    
            except Exception as e:
                # Fallback s·ª≠ d·ª•ng avg_price n·∫øu c√≥ l·ªói
                print(f"L·ªói l·∫•y gi√° hi·ªán t·∫°i cho {symbol}: {e}")
                total_current_value += data["shares"] * data["avg_price"]
        
        portfolio["total_invested"] = total_invested
        portfolio["total_profit_loss"] = total_current_value - total_invested
        
        # T√≠nh current_cash = initial_cash - total_invested
        current_cash = portfolio["initial_cash"] - total_invested
        portfolio["current_cash"] = current_cash
        portfolio["total_value"] = total_current_value + current_cash
        portfolio["last_updated"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        self._save_portfolios()
    
    def get_portfolio_summary(self, portfolio_id: str) -> Optional[pd.DataFrame]:
        """
        L·∫•y t√≥m t·∫Øt danh m·ª•c d·∫°ng DataFrame
        
        Args:
            portfolio_id: ID c·ªßa danh m·ª•c
            
        Returns:
            DataFrame ch·ª©a th√¥ng tin danh m·ª•c ho·∫∑c None
        """
        trading_history = self.get_trading_history(portfolio_id)
        if trading_history is None:
            return None
        
        return trading_history.get_portfolio_summary()
    
    def clone_portfolio(self, source_portfolio_id: str, new_name: str, 
                       new_description: str = "") -> Optional[str]:
        """
        Nh√¢n b·∫£n danh m·ª•c (ch·ªâ sao ch√©p th√¥ng tin, kh√¥ng sao ch√©p giao d·ªãch)
        
        Args:
            source_portfolio_id: ID danh m·ª•c ngu·ªìn
            new_name: T√™n danh m·ª•c m·ªõi
            new_description: M√¥ t·∫£ danh m·ª•c m·ªõi
            
        Returns:
            ID danh m·ª•c m·ªõi ho·∫∑c None n·∫øu th·∫•t b·∫°i
        """
        source_portfolio = self.get_portfolio(source_portfolio_id)
        if source_portfolio is None:
            return None
        
        # T·∫°o danh m·ª•c m·ªõi v·ªõi th√¥ng tin t∆∞∆°ng t·ª±
        new_portfolio_id = self.create_portfolio(
            name=new_name,
            description=new_description,
            initial_cash=source_portfolio["initial_cash"],
            strategy=source_portfolio["strategy"]
        )
        
        return new_portfolio_id
    
    def get_portfolio_performance(self, portfolio_id: str) -> Optional[Dict]:
        """
        L·∫•y th·ªëng k√™ hi·ªáu su·∫•t c·ªßa danh m·ª•c
        
        Args:
            portfolio_id: ID c·ªßa danh m·ª•c
            
        Returns:
            Dict ch·ª©a c√°c th√¥ng s·ªë hi·ªáu su·∫•t
        """
        portfolio = self.get_portfolio(portfolio_id)
        trading_history = self.get_trading_history(portfolio_id)
        
        if portfolio is None or trading_history is None:
            return None
        
        holdings = trading_history.get_current_holdings()
        transactions = trading_history.get_transactions_history()
        
        # T√≠nh c√°c th√¥ng s·ªë c∆° b·∫£n
        total_stocks = len(holdings)
        total_transactions = len(transactions)
        total_invested = portfolio["total_invested"]
        
        # T√≠nh s·ªë ng√†y ƒë·∫ßu t∆∞
        if transactions:
            first_transaction_date = min(t["date"] for t in transactions)
            first_date = datetime.strptime(first_transaction_date.split(" ")[0], "%Y-%m-%d")
            days_invested = (datetime.now() - first_date).days
        else:
            days_invested = 0
        
        return {
            "portfolio_id": portfolio_id,
            "portfolio_name": portfolio["name"],
            "total_stocks": total_stocks,
            "total_transactions": total_transactions,
            "total_invested": total_invested,
            "current_value": portfolio.get("total_value", 0),
            "profit_loss": portfolio.get("total_profit_loss", 0),
            "days_invested": days_invested,
            "created_date": portfolio["created_date"],
            "last_updated": portfolio["last_updated"]
        }
    
    def refresh_all_portfolios(self):
        """C·∫≠p nh·∫≠t l·∫°i th·ªëng k√™ cho t·∫•t c·∫£ c√°c danh m·ª•c"""
        updated_count = 0
        for portfolio_id in self.portfolios_data["portfolios"].keys():
            portfolio = self.portfolios_data["portfolios"][portfolio_id]
            if portfolio.get("is_active", True):  # Ch·ªâ c·∫≠p nh·∫≠t nh·ªØng portfolio ƒëang ho·∫°t ƒë·ªông
                print(f"ƒêang c·∫≠p nh·∫≠t danh m·ª•c: {portfolio['name']}")
                self._update_portfolio_stats(portfolio_id)
                updated_count += 1
        
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {updated_count} danh m·ª•c th√†nh c√¥ng!")
        return True

    def add_sample_portfolios(self):
        """Th√™m d·ªØ li·ªáu m·∫´u cho demo"""
        # Danh m·ª•c c·ªï phi·∫øu ng√¢n h√†ng
        banking_id = self.create_portfolio(
            name="Danh m·ª•c Ng√¢n h√†ng",
            description="ƒê·∫ßu t∆∞ v√†o c√°c c·ªï phi·∫øu ng√¢n h√†ng l·ªõn",
            initial_cash=100000000,  # 100 tri·ªáu
            strategy="Value Investing - Banking Sector"
        )
        
        # Th√™m giao d·ªãch m·∫´u cho danh m·ª•c ng√¢n h√†ng
        banking_trades = [
            {"symbol": "VCB", "type": "BUY", "quantity": 100, "price": 78000, "date": "2024-01-15"},
            {"symbol": "TCB", "type": "BUY", "quantity": 200, "price": 25000, "date": "2024-01-20"},
            {"symbol": "BID", "type": "BUY", "quantity": 150, "price": 45000, "date": "2024-02-01"},
        ]
        
        for trade in banking_trades:
            self.add_transaction(banking_id, **trade)
        
        # Danh m·ª•c c·ªï phi·∫øu c√¥ng ngh·ªá
        tech_id = self.create_portfolio(
            name="Danh m·ª•c C√¥ng ngh·ªá",
            description="ƒê·∫ßu t∆∞ v√†o c√°c c·ªï phi·∫øu c√¥ng ngh·ªá v√† vi·ªÖn th√¥ng",
            initial_cash=50000000,  # 50 tri·ªáu
            strategy="Growth Investing - Technology"
        )
        
        # Th√™m giao d·ªãch m·∫´u cho danh m·ª•c c√¥ng ngh·ªá
        tech_trades = [
            {"symbol": "FPT", "type": "BUY", "quantity": 100, "price": 120000, "date": "2024-01-10"},
            {"symbol": "CMG", "type": "BUY", "quantity": 200, "price": 35000, "date": "2024-01-25"},
        ]
        
        for trade in tech_trades:
            self.add_transaction(tech_id, **trade)
        
        # Danh m·ª•c c·ªï phi·∫øu ti√™u d√πng
        consumer_id = self.create_portfolio(
            name="Danh m·ª•c Ti√™u d√πng",
            description="ƒê·∫ßu t∆∞ v√†o c√°c c·ªï phi·∫øu h√†ng ti√™u d√πng v√† th·ª±c ph·∫©m",
            initial_cash=75000000,  # 75 tri·ªáu
            strategy="Dividend Investing - Consumer Goods"
        )
        
        # Th√™m giao d·ªãch m·∫´u cho danh m·ª•c ti√™u d√πng
        consumer_trades = [
            {"symbol": "VNM", "type": "BUY", "quantity": 200, "price": 85000, "date": "2024-01-05"},
            {"symbol": "MSN", "type": "BUY", "quantity": 100, "price": 125000, "date": "2024-01-30"},
        ]
        
        for trade in consumer_trades:
            self.add_transaction(consumer_id, **trade)
        
        print("‚úÖ ƒê√£ t·∫°o 3 danh m·ª•c giao d·ªãch m·∫´u v·ªõi c√°c giao d·ªãch demo")
