"""
Unified Configuration System for Stock Analysis

H·ªá th·ªëng c·∫•u h√¨nh th·ªëng nh·∫•t cho ph√¢n t√≠ch c·ªï phi·∫øu
- Qu·∫£n l√Ω kho·∫£ng th·ªùi gian ph√¢n t√≠ch
- Th·ªëng nh·∫•t logic t√≠n hi·ªáu v√† ch·ªâ s·ªë k·ªπ thu·∫≠t
- C·∫•u h√¨nh chung cho t·∫•t c·∫£ c√°c trang
"""

from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass
from typing import Dict, List, Tuple, Optional


class TimeFrame(Enum):
    """Enum cho c√°c kho·∫£ng th·ªùi gian ph√¢n t√≠ch"""
    SHORT_TERM = "short_term"      # Ng·∫Øn h·∫°n
    MEDIUM_TERM = "medium_term"    # Trung h·∫°n  
    LONG_TERM = "long_term"        # D√†i h·∫°n


@dataclass
class TimeFrameConfig:
    """C·∫•u h√¨nh kho·∫£ng th·ªùi gian"""
    name: str                      # T√™n hi·ªÉn th·ªã
    display_days: int              # S·ªë ng√†y hi·ªÉn th·ªã
    analysis_days: int             # S·ªë ng√†y d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch (bao g·ªìm buffer cho indicators)
    short_ma: int                  # Moving Average ng·∫Øn h·∫°n
    long_ma: int                   # Moving Average d√†i h·∫°n
    rsi_period: int               # Chu k·ª≥ RSI
    macd_fast: int                # MACD fast
    macd_slow: int                # MACD slow
    macd_signal: int              # MACD signal
    description: str              # M√¥ t·∫£


@dataclass 
class SignalConfig:
    """C·∫•u h√¨nh t√≠n hi·ªáu giao d·ªãch"""
    rsi_overbought: float = 70.0
    rsi_oversold: float = 30.0
    macd_signal_threshold: float = 0.0
    bb_overbought: float = 0.8    # Bollinger Bands %B > 80%
    bb_oversold: float = 0.2      # Bollinger Bands %B < 20%
    stoch_overbought: float = 80.0
    stoch_oversold: float = 20.0
    williams_overbought: float = -20.0
    williams_oversold: float = -80.0
    volume_spike_threshold: float = 1.5  # 150% c·ªßa volume trung b√¨nh
    min_confidence_threshold: float = 0.3  # Ng∆∞·ª°ng tin c·∫≠y t·ªëi thi·ªÉu


class UnifiedConfig:
    """L·ªõp c·∫•u h√¨nh th·ªëng nh·∫•t cho to√†n b·ªô h·ªá th·ªëng"""
    
    # ƒê·ªãnh nghƒ©a c√°c kho·∫£ng th·ªùi gian
    TIME_FRAMES = {
        TimeFrame.SHORT_TERM: TimeFrameConfig(
            name="Ng·∫Øn h·∫°n (1-2 tu·∫ßn)",
            display_days=14,
            analysis_days=60,  # C·∫ßn 60 ng√†y ƒë·ªÉ t√≠nh c√°c indicator
            short_ma=5,
            long_ma=10,
            rsi_period=14,
            macd_fast=12,
            macd_slow=26,
            macd_signal=9,
            description="Ph√π h·ª£p cho swing trading, day trading"
        ),
        TimeFrame.MEDIUM_TERM: TimeFrameConfig(
            name="Trung h·∫°n (1-3 th√°ng)",
            display_days=90,
            analysis_days=200,  # C·∫ßn 200 ng√†y ƒë·ªÉ t√≠nh c√°c indicator d√†i h·∫°n
            short_ma=20,
            long_ma=50,
            rsi_period=14,
            macd_fast=12,
            macd_slow=26,
            macd_signal=9,
            description="Ph√π h·ª£p cho ƒë·∫ßu t∆∞ trung h·∫°n"
        ),
        TimeFrame.LONG_TERM: TimeFrameConfig(
            name="D√†i h·∫°n (6 th√°ng - 1 nƒÉm)",
            display_days=365,
            analysis_days=500,  # C·∫ßn 500 ng√†y ƒë·ªÉ t√≠nh SMA 200, etc.
            short_ma=50,
            long_ma=200,
            rsi_period=14,
            macd_fast=12,
            macd_slow=26,
            macd_signal=9,
            description="Ph√π h·ª£p cho ƒë·∫ßu t∆∞ d√†i h·∫°n, ph√¢n t√≠ch xu h∆∞·ªõng"
        )
    }
    
    # C·∫•u h√¨nh t√≠n hi·ªáu chung
    SIGNAL_CONFIG = SignalConfig()
    
    @classmethod
    def get_timeframe_config(cls, timeframe: TimeFrame) -> TimeFrameConfig:
        """L·∫•y c·∫•u h√¨nh theo kho·∫£ng th·ªùi gian"""
        return cls.TIME_FRAMES[timeframe]
    
    @classmethod
    def get_timeframe_options(cls) -> Dict[str, TimeFrame]:
        """L·∫•y c√°c l·ª±a ch·ªçn kho·∫£ng th·ªùi gian cho UI"""
        return {config.name: timeframe for timeframe, config in cls.TIME_FRAMES.items()}
    
    @classmethod
    def get_date_range(cls, timeframe: TimeFrame) -> Tuple[datetime, datetime]:
        """T√≠nh to√°n kho·∫£ng th·ªùi gian t·ª´ ng√†y hi·ªán t·∫°i"""
        config = cls.get_timeframe_config(timeframe)
        end_date = datetime.now()
        start_date = end_date - timedelta(days=config.analysis_days)
        return start_date, end_date
    
    @classmethod
    def get_display_date_range(cls, timeframe: TimeFrame) -> Tuple[datetime, datetime]:
        """T√≠nh to√°n kho·∫£ng th·ªùi gian hi·ªÉn th·ªã"""
        config = cls.get_timeframe_config(timeframe)
        end_date = datetime.now()
        start_date = end_date - timedelta(days=config.display_days)
        return start_date, end_date
    
    @classmethod
    def create_sidebar_timeframe_selector(cls, key: str = "timeframe_selector") -> TimeFrame:
        """T·∫°o selector cho kho·∫£ng th·ªùi gian trong sidebar"""
        import streamlit as st
        
        st.sidebar.markdown("### ‚è±Ô∏è Kho·∫£ng th·ªùi gian ph√¢n t√≠ch")
        
        options = cls.get_timeframe_options()
        selected_name = st.sidebar.selectbox(
            "Ch·ªçn kho·∫£ng th·ªùi gian:",
            list(options.keys()),
            index=1,  # M·∫∑c ƒë·ªãnh l√† trung h·∫°n
            key=key,
            help="Ch·ªçn kho·∫£ng th·ªùi gian ph√¢n t√≠ch ph√π h·ª£p v·ªõi chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞"
        )
        
        selected_timeframe = options[selected_name]
        config = cls.get_timeframe_config(selected_timeframe)
        
        # Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh
        with st.sidebar.expander("‚ÑπÔ∏è Th√¥ng tin c·∫•u h√¨nh", expanded=False):
            st.write(f"**M√¥ t·∫£**: {config.description}")
            st.write(f"**Hi·ªÉn th·ªã**: {config.display_days} ng√†y")
            st.write(f"**D·ªØ li·ªáu ph√¢n t√≠ch**: {config.analysis_days} ng√†y")
            st.write(f"**MA ng·∫Øn h·∫°n**: {config.short_ma} ng√†y")
            st.write(f"**MA d√†i h·∫°n**: {config.long_ma} ng√†y")
            st.write(f"**RSI**: {config.rsi_period} ng√†y")
            st.write(f"**MACD**: {config.macd_fast}/{config.macd_slow}/{config.macd_signal}")
        
        return selected_timeframe
    
    @classmethod
    def get_unified_indicators_config(cls, timeframe: TimeFrame) -> Dict:
        """L·∫•y c·∫•u h√¨nh indicators theo timeframe"""
        config = cls.get_timeframe_config(timeframe)
        
        return {
            'sma_periods': [config.short_ma, config.long_ma],
            'ema_periods': [config.short_ma, config.long_ma],
            'rsi_period': config.rsi_period,
            'macd_params': {
                'fast': config.macd_fast,
                'slow': config.macd_slow,
                'signal': config.macd_signal
            },
            'bb_period': config.long_ma,  # Bollinger Bands d√πng MA d√†i h·∫°n
            'stoch_k_period': 14,
            'stoch_d_period': 3,
            'williams_period': 14,
            'adx_period': 14,
            'atr_period': 14
        }
    
    @classmethod
    def get_signal_thresholds(cls) -> Dict:
        """L·∫•y ng∆∞·ª°ng t√≠n hi·ªáu"""
        return {
            'rsi_overbought': cls.SIGNAL_CONFIG.rsi_overbought,
            'rsi_oversold': cls.SIGNAL_CONFIG.rsi_oversold,
            'macd_signal_threshold': cls.SIGNAL_CONFIG.macd_signal_threshold,
            'bb_overbought': cls.SIGNAL_CONFIG.bb_overbought,
            'bb_oversold': cls.SIGNAL_CONFIG.bb_oversold,
            'stoch_overbought': cls.SIGNAL_CONFIG.stoch_overbought,
            'stoch_oversold': cls.SIGNAL_CONFIG.stoch_oversold,
            'williams_overbought': cls.SIGNAL_CONFIG.williams_overbought,
            'williams_oversold': cls.SIGNAL_CONFIG.williams_oversold,
            'volume_spike_threshold': cls.SIGNAL_CONFIG.volume_spike_threshold,
            'min_confidence_threshold': cls.SIGNAL_CONFIG.min_confidence_threshold
        }
    
    @classmethod
    def create_advanced_settings_expander(cls, key: str = "advanced_settings") -> Dict:
        """T·∫°o expander cho c√†i ƒë·∫∑t n√¢ng cao"""
        import streamlit as st
        
        with st.sidebar.expander("‚öôÔ∏è C√†i ƒë·∫∑t n√¢ng cao", expanded=False):
            st.markdown("#### üéØ Ng∆∞·ª°ng t√≠n hi·ªáu")
            
            col1, col2 = st.columns(2)
            
            with col1:
                rsi_overbought = st.slider(
                    "RSI Qu√° mua", 
                    60, 90, 
                    int(cls.SIGNAL_CONFIG.rsi_overbought),
                    key=f"{key}_rsi_ob"
                )
                
                bb_overbought = st.slider(
                    "BB %B Qu√° mua",
                    0.6, 1.0,
                    cls.SIGNAL_CONFIG.bb_overbought,
                    0.05,
                    key=f"{key}_bb_ob"
                )
                
                stoch_overbought = st.slider(
                    "Stoch Qu√° mua",
                    70, 90,
                    int(cls.SIGNAL_CONFIG.stoch_overbought),
                    key=f"{key}_stoch_ob"
                )
            
            with col2:
                rsi_oversold = st.slider(
                    "RSI Qu√° b√°n",
                    10, 40,
                    int(cls.SIGNAL_CONFIG.rsi_oversold),
                    key=f"{key}_rsi_os"
                )
                
                bb_oversold = st.slider(
                    "BB %B Qu√° b√°n",
                    0.0, 0.4,
                    cls.SIGNAL_CONFIG.bb_oversold,
                    0.05,
                    key=f"{key}_bb_os"
                )
                
                stoch_oversold = st.slider(
                    "Stoch Qu√° b√°n",
                    10, 30,
                    int(cls.SIGNAL_CONFIG.stoch_oversold),
                    key=f"{key}_stoch_os"
                )
            
            min_confidence = st.slider(
                "Ng∆∞·ª°ng tin c·∫≠y t·ªëi thi·ªÉu",
                0.0, 0.8,
                cls.SIGNAL_CONFIG.min_confidence_threshold,
                0.05,
                key=f"{key}_min_conf",
                help="Ch·ªâ hi·ªÉn th·ªã t√≠n hi·ªáu c√≥ ƒë·ªô tin c·∫≠y >= ng∆∞·ª°ng n√†y"
            )
            
            volume_spike = st.slider(
                "Ng∆∞·ª°ng tƒÉng ƒë·ªôt bi·∫øn kh·ªëi l∆∞·ª£ng",
                1.0, 3.0,
                cls.SIGNAL_CONFIG.volume_spike_threshold,
                0.1,
                key=f"{key}_vol_spike",
                help="Kh·ªëi l∆∞·ª£ng >= X l·∫ßn kh·ªëi l∆∞·ª£ng trung b√¨nh"
            )
            
            return {
                'rsi_overbought': rsi_overbought,
                'rsi_oversold': rsi_oversold,
                'bb_overbought': bb_overbought,
                'bb_oversold': bb_oversold,
                'stoch_overbought': stoch_overbought,
                'stoch_oversold': stoch_oversold,
                'min_confidence_threshold': min_confidence,
                'volume_spike_threshold': volume_spike
            }


class UnifiedSignalAnalyzer:
    """L·ªõp ph√¢n t√≠ch t√≠n hi·ªáu th·ªëng nh·∫•t"""
    
    def __init__(self, timeframe: TimeFrame, custom_thresholds: Optional[Dict] = None):
        self.timeframe = timeframe
        self.config = UnifiedConfig.get_timeframe_config(timeframe)
        self.thresholds = UnifiedConfig.get_signal_thresholds()
        
        # Override v·ªõi custom thresholds n·∫øu c√≥
        if custom_thresholds:
            self.thresholds.update(custom_thresholds)
    
    def analyze_comprehensive_signal(self, df_with_indicators) -> Dict:
        """
        Thu·∫≠t to√°n confidence n√¢ng cao - th·ªëng nh·∫•t cho t·∫•t c·∫£ c√°c trang
        S·ª≠ d·ª•ng ph√¢n t√≠ch ƒëa y·∫øu t·ªë ƒë·ªÉ t√≠nh confidence ch√≠nh x√°c
        """
        if df_with_indicators is None or df_with_indicators.empty:
            return {
                'signal': 'HOLD',
                'confidence': 0.0,
                'reasons': ['Kh√¥ng c√≥ d·ªØ li·ªáu'],
                'details': {}
            }
        
        # N·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu (>= 30 bars), d√πng ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß
        if len(df_with_indicators) >= 30:
            return self._analyze_full_technical_signal(df_with_indicators)
        # N·∫øu √≠t d·ªØ li·ªáu, d√πng thu·∫≠t to√°n advanced fallback
        else:
            return self._analyze_advanced_fallback_signal(df_with_indicators)
    
    def _analyze_full_technical_signal(self, df_with_indicators) -> Dict:
        """
        Ph√¢n t√≠ch k·ªπ thu·∫≠t ƒë·∫ßy ƒë·ªß v·ªõi thu·∫≠t to√°n confidence advanced
        """
        prices = df_with_indicators['close'].values
        volumes = df_with_indicators['volume'].values if 'volume' in df_with_indicators.columns else None
        current_price = prices[-1]
        details = {}
        
        # T√≠nh multiple MA periods
        ma5 = prices[-5:].mean()
        ma10 = prices[-10:].mean()
        ma20 = prices[-20:].mean()
        
        details['ma5'] = ma5
        details['ma10'] = ma10
        details['ma20'] = ma20
        
        # T√≠nh volatility
        price_changes = [(prices[i] - prices[i-1]) / prices[i-1] for i in range(1, min(30, len(prices)))]
        volatility = sum([abs(change) for change in price_changes]) / len(price_changes)
        details['volatility'] = volatility
        
        # T√≠nh trend strength v·ªõi slope regression
        x = list(range(20))
        y = prices[-20:]
        n = len(x)
        trend_slope = (n * sum(x[i] * y[i] for i in range(n)) - sum(x) * sum(y)) / (n * sum(x[i]**2 for i in range(n)) - sum(x)**2)
        trend_slope_percent = trend_slope / current_price
        details['trend_slope'] = trend_slope_percent
        
        # Volume confirmation
        volume_factor = 1.0
        if volumes is not None:
            recent_avg_volume = volumes[-10:].mean()
            total_avg_volume = volumes[-30:].mean()
            if recent_avg_volume > total_avg_volume * 1.2:
                volume_factor = 1.3
            elif recent_avg_volume < total_avg_volume * 0.8:
                volume_factor = 0.7
        details['volume_factor'] = volume_factor
        
        # MA alignment score (ƒë·ªô ch√≠nh x√°c cao)
        ma_alignment = 0
        if current_price > ma5 > ma10 > ma20:
            ma_alignment = 1.0  # Perfect uptrend
        elif current_price > ma5 > ma10:
            ma_alignment = 0.7
        elif current_price > ma5:
            ma_alignment = 0.4
        elif current_price < ma5 < ma10 < ma20:
            ma_alignment = -1.0  # Perfect downtrend
        elif current_price < ma5 < ma10:
            ma_alignment = -0.7
        elif current_price < ma5:
            ma_alignment = -0.4
        else:
            ma_alignment = 0
        details['ma_alignment'] = ma_alignment
        
        # Base signal strength
        price_vs_ma5 = (current_price - ma5) / ma5
        base_strength = min(abs(price_vs_ma5) * 12, 0.9)  # More sensitive
        details['base_strength'] = base_strength
        details['price_vs_ma5'] = price_vs_ma5
        
        # Combine factors
        confidence_factors = [
            base_strength,  # Price vs MA5
            abs(ma_alignment) * 0.35,  # MA alignment
            min(abs(trend_slope_percent) * 100, 0.25),  # Trend strength
            (volume_factor - 1) * 0.15  # Volume confirmation
        ]
        
        technical_score = sum(confidence_factors)
        
        # Volatility penalty (high volatility = less reliable)
        volatility_penalty = min(volatility * 8, 0.4)  # Adaptive penalty
        technical_score = max(0, technical_score - volatility_penalty)
        
        details['confidence_factors'] = confidence_factors
        details['volatility_penalty'] = volatility_penalty
        
        # Determine signal and confidence
        reasons = []
        if price_vs_ma5 > 0.015:  # 1.5% above MA5
            signal = "BUY"
            confidence = min(technical_score, 1.0)  # Cap at 100%
            reasons.append(f'Gi√° cao h∆°n MA5 {price_vs_ma5:.1%}')
            if ma_alignment > 0.6:
                reasons.append('Xu h∆∞·ªõng tƒÉng m·∫°nh')
            if volume_factor > 1.2:
                reasons.append('Volume x√°c nh·∫≠n t√≠ch c·ª±c')
            if trend_slope_percent > 0.001:
                reasons.append('Momentum tƒÉng')
        elif price_vs_ma5 < -0.015:  # 1.5% below MA5
            signal = "SELL"
            confidence = min(technical_score, 1.0)  # Cap at 100%
            reasons.append(f'Gi√° th·∫•p h∆°n MA5 {abs(price_vs_ma5):.1%}')
            if ma_alignment < -0.6:
                reasons.append('Xu h∆∞·ªõng gi·∫£m m·∫°nh')
            if volume_factor > 1.2:
                reasons.append('Volume x√°c nh·∫≠n ti√™u c·ª±c')
            if trend_slope_percent < -0.001:
                reasons.append('Momentum gi·∫£m')
        else:
            signal = "HOLD"
            # Cho HOLD c≈©ng c√≥ confidence d·ª±a tr√™n technical_score nh∆∞ng gi·∫£m ƒëi
            confidence = min(technical_score * 0.5, 1.0)  # HOLD c√≥ confidence th·∫•p h∆°n, cap at 100%
            reasons.append('Gi√° dao ƒë·ªông quanh MA5')
            
            # Th√™m l√Ω do c·ª• th·ªÉ cho HOLD
            if abs(ma_alignment) > 0.3:
                if ma_alignment > 0:
                    reasons.append('C√≥ d·∫•u hi·ªáu tƒÉng nh·∫π')
                else:
                    reasons.append('C√≥ d·∫•u hi·ªáu gi·∫£m nh·∫π')
            
            if abs(trend_slope_percent) > 0.0005:
                if trend_slope_percent > 0:
                    reasons.append('Momentum tƒÉng y·∫øu')
                else:
                    reasons.append('Momentum gi·∫£m y·∫øu')
        
        if volatility > 0.06:  # 6% daily volatility
            reasons.append(f'C·∫£nh b√°o: Bi·∫øn ƒë·ªông cao ({volatility:.1%})')
        
        return {
            'signal': signal,
            'confidence': confidence,
            'reasons': reasons,
            'details': details
        }
    
    def _analyze_advanced_fallback_signal(self, df_with_indicators) -> Dict:
        """
        Thu·∫≠t to√°n advanced cho tr∆∞·ªùng h·ª£p √≠t d·ªØ li·ªáu (< 30 bars)
        """
        if len(df_with_indicators) < 5:
            return {
                'signal': 'HOLD',
                'confidence': 0.0,
                'reasons': ['Kh√¥ng ƒë·ªß d·ªØ li·ªáu cho ph√¢n t√≠ch'],
                'details': {}
            }
        
        prices = df_with_indicators['close'].values
        volumes = df_with_indicators['volume'].values if 'volume' in df_with_indicators.columns else None
        current_price = prices[-1]
        details = {}
        
        # T√≠nh multiple MA periods
        ma5 = prices[-5:].mean()
        ma10 = prices[-10:].mean() if len(prices) >= 10 else ma5
        ma20 = prices[-20:].mean() if len(prices) >= 20 else ma10
        
        details['ma5'] = ma5
        details['ma10'] = ma10
        details['ma20'] = ma20
        
        # T√≠nh volatility v·ªõi d·ªØ li·ªáu c√≥ h·∫°n
        if len(prices) >= 10:
            price_changes = [(prices[i] - prices[i-1]) / prices[i-1] for i in range(1, len(prices))]
            volatility = sum([abs(change) for change in price_changes]) / len(price_changes)
        else:
            volatility = 0.02  # Default 2%
        details['volatility'] = volatility
        
        # T√≠nh trend strength
        if len(prices) >= 5:
            trend_slope = (prices[-1] - prices[-5]) / prices[-5]
        else:
            trend_slope = 0
        details['trend_slope'] = trend_slope
        
        # Volume confirmation (n·∫øu c√≥)
        volume_factor = 1.0
        if volumes is not None and len(volumes) >= 5:
            recent_avg_volume = volumes[-5:].mean()
            total_avg_volume = volumes.mean()
            if recent_avg_volume > total_avg_volume * 1.2:
                volume_factor = 1.2
            elif recent_avg_volume < total_avg_volume * 0.8:
                volume_factor = 0.8
        details['volume_factor'] = volume_factor
        
        # MA alignment score
        ma_alignment = 0
        if current_price > ma5 > ma10 > ma20:
            ma_alignment = 1.0
        elif current_price > ma5 > ma10:
            ma_alignment = 0.7
        elif current_price > ma5:
            ma_alignment = 0.3
        elif current_price < ma5 < ma10 < ma20:
            ma_alignment = -1.0
        elif current_price < ma5 < ma10:
            ma_alignment = -0.7
        elif current_price < ma5:
            ma_alignment = -0.3
        else:
            ma_alignment = 0
        details['ma_alignment'] = ma_alignment
        
        # Base signal strength
        price_vs_ma5 = (current_price - ma5) / ma5
        base_strength = min(abs(price_vs_ma5) * 10, 0.8)
        details['base_strength'] = base_strength
        details['price_vs_ma5'] = price_vs_ma5
        
        # Combine factors
        confidence_factors = [
            base_strength,
            abs(ma_alignment) * 0.3,
            min(abs(trend_slope) * 15, 0.2),
            (volume_factor - 1) * 0.1
        ]
        
        technical_score = sum(confidence_factors)
        
        # Volatility penalty
        volatility_penalty = min(volatility * 5, 0.3)
        technical_score = max(0, technical_score - volatility_penalty)
        
        details['confidence_factors'] = confidence_factors
        details['volatility_penalty'] = volatility_penalty
        
        # Determine signal
        reasons = []
        if price_vs_ma5 > 0.02:  # 2% above MA5
            signal = "BUY"
            confidence = min(technical_score, 1.0)  # Cap at 100%
            reasons.append(f'Gi√° cao h∆°n MA5 {price_vs_ma5:.1%}')
            if ma_alignment > 0.5:
                reasons.append('Xu h∆∞·ªõng tƒÉng')
            if volume_factor > 1.1:
                reasons.append('Volume x√°c nh·∫≠n')
        elif price_vs_ma5 < -0.02:  # 2% below MA5
            signal = "SELL"
            confidence = min(technical_score, 1.0)  # Cap at 100%
            reasons.append(f'Gi√° th·∫•p h∆°n MA5 {abs(price_vs_ma5):.1%}')
            if ma_alignment < -0.5:
                reasons.append('Xu h∆∞·ªõng gi·∫£m')
            if volume_factor > 1.1:
                reasons.append('Volume x√°c nh·∫≠n')
        else:
            signal = "HOLD"
            # HOLD c≈©ng c√≥ confidence d·ª±a tr√™n technical_score
            confidence = min(technical_score * 0.6, 1.0)  # Gi·∫£m confidence cho HOLD, cap at 100%
            reasons.append('Gi√° dao ƒë·ªông quanh MA5')
            
            # Th√™m th√¥ng tin chi ti·∫øt cho HOLD
            if abs(ma_alignment) > 0.2:
                if ma_alignment > 0:
                    reasons.append('C√≥ xu h∆∞·ªõng tƒÉng nh·∫π')
                else:
                    reasons.append('C√≥ xu h∆∞·ªõng gi·∫£m nh·∫π')
            
            if abs(trend_slope) > 0.01:
                if trend_slope > 0:
                    reasons.append('Momentum tƒÉng y·∫øu')
                else:
                    reasons.append('Momentum gi·∫£m y·∫øu')
        
        if volatility > 0.05:  # 5% daily volatility
            reasons.append(f'C·∫£nh b√°o: Bi·∫øn ƒë·ªông cao ({volatility:.1%})')
        
        return {
            'signal': signal,
            'confidence': confidence,
            'reasons': reasons,
            'details': details
        }


# Import pandas ·ªü ƒë√¢y ƒë·ªÉ tr√°nh l·ªói
import pandas as pd