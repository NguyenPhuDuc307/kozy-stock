"""
üîç MARKET SCANNER EXAMPLE - V√≠ d·ª• qu√©t th·ªã tr∆∞·ªùng
===============================================

V√≠ d·ª• s·ª≠ d·ª•ng Market Scanner ƒë·ªÉ qu√©t v√† ph√¢n t√≠ch to√†n b·ªô th·ªã tr∆∞·ªùng ch·ª©ng kho√°n
"""

import sys
import os
from datetime import datetime

# Add project root to path
project_root = os.path.dirname(os.path.dirname(__file__))
sys.path.append(project_root)

from src.analysis.market_scanner import MarketScanner
from src.data.data_provider import DataProvider
import pandas as pd

def main():
    """
    Ch·∫°y market scanner ƒë·ªÉ qu√©t v√† ph√¢n t√≠ch th·ªã tr∆∞·ªùng
    """
    print("üîç B·∫Øt ƒë·∫ßu qu√©t th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam...")
    print("=" * 60)
    
    # Kh·ªüi t·∫°o Market Scanner
    scanner = MarketScanner()
    
    # Qu√©t th·ªã tr∆∞·ªùng (c√≥ th·ªÉ ch·ªâ ƒë·ªãnh danh s√°ch c·ªï phi·∫øu c·ª• th·ªÉ)
    # V√≠ d·ª•: qu√©t m·ªôt s·ªë c·ªï phi·∫øu l·ªõn
    test_symbols = ['VCB', 'VIC', 'VHM', 'VNM', 'HPG', 'FPT', 'CTG', 'BID', 'TCB', 'ACB']
    
    print(f"üìä Ph√¢n t√≠ch {len(test_symbols)} c·ªï phi·∫øu h√†ng ƒë·∫ßu...")
    
    # Qu√©t th·ªã tr∆∞·ªùng
    results_df = scanner.scan_market(symbols=test_symbols, period='3mo')
    
    if results_df.empty:
        print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch")
        return
    
    # In t√≥m t·∫Øt th·ªã tr∆∞·ªùng
    scanner.print_market_summary(results_df)
    
    # Chi ti·∫øt ph√¢n t√≠ch
    print("\nüìã CHI TI·∫æT PH√ÇN T√çCH:")
    print("=" * 80)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp
    display_columns = [
        'Symbol', 'Price', 'Overall_Signal', 'Overall_Score', 
        'Liquidity_Ratio', 'RSI_Signal', 'MACD_Signal', 'Volume_Signal'
    ]
    
    print(results_df[display_columns].to_string(index=False))
    
    # L∆∞u b√°o c√°o Excel
    print(f"\nüíæ ƒêang xu·∫•t b√°o c√°o Excel...")
    excel_file = scanner.export_market_report(results_df)
    if excel_file:
        print(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o: {excel_file}")
    
    # Ph√¢n t√≠ch chi ti·∫øt cho c√°c t√≠n hi·ªáu mua/b√°n
    print(f"\nüéØ PH√ÇN T√çCH CHI TI·∫æT:")
    print("-" * 40)
    
    # Top c·ªï phi·∫øu mua
    top_buys = scanner.get_top_buy_signals(results_df, 3)
    if not top_buys.empty:
        print(f"\nüü¢ TOP 3 C·ªî PHI·∫æU N√äN MUA:")
        for _, stock in top_buys.iterrows():
            print(f"""
üìà {stock['Symbol']} - ƒêi·ªÉm: {stock['Overall_Score']:.3f}
   üí∞ Gi√°: {stock['Price']:,.0f} VND
   üìä Thanh kho·∫£n: {stock['Liquidity_Ratio']:.1f}x
   üéØ T√≠n hi·ªáu: RSI({stock['RSI_Signal']}) | MACD({stock['MACD_Signal']}) | BB({stock['BB_Signal']})
   üìà ƒê·ªông l·ª±c: {stock['Momentum_Signal']} | Kh·ªëi l∆∞·ª£ng: {stock['Volume_Signal']}
""")
    
    # Top c·ªï phi·∫øu b√°n
    top_sells = scanner.get_top_sell_signals(results_df, 3)
    if not top_sells.empty:
        print(f"\nüî¥ TOP 3 C·ªî PHI·∫æU N√äN B√ÅN:")
        for _, stock in top_sells.iterrows():
            print(f"""
üìâ {stock['Symbol']} - ƒêi·ªÉm: {stock['Overall_Score']:.3f}
   üí∞ Gi√°: {stock['Price']:,.0f} VND
   üìä Thanh kho·∫£n: {stock['Liquidity_Ratio']:.1f}x
   üéØ T√≠n hi·ªáu: RSI({stock['RSI_Signal']}) | MACD({stock['MACD_Signal']}) | BB({stock['BB_Signal']})
   üìà ƒê·ªông l·ª±c: {stock['Momentum_Signal']} | Kh·ªëi l∆∞·ª£ng: {stock['Volume_Signal']}
""")
    
    # Th·ªëng k√™ theo t·ª´ng lo·∫°i t√≠n hi·ªáu
    print(f"\nüìä TH·ªêNG K√ä T√çN HI·ªÜU:")
    print("-" * 30)
    
    for signal_type in ['RSI_Signal', 'MACD_Signal', 'BB_Signal', 'Volume_Signal']:
        signal_counts = results_df[signal_type].value_counts()
        print(f"\n{signal_type.replace('_Signal', '')}:")
        for signal, count in signal_counts.items():
            print(f"  {signal}: {count} c·ªï phi·∫øu")
    
    print(f"\n‚úÖ Ho√†n th√†nh ph√¢n t√≠ch th·ªã tr∆∞·ªùng!")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

def analyze_full_market():
    """
    Ph√¢n t√≠ch to√†n b·ªô th·ªã tr∆∞·ªùng (t·∫•t c·∫£ c·ªï phi·∫øu)
    """
    print("üîç PH√ÇN T√çCH TO√ÄN B·ªò TH·ªä TR∆Ø·ªúNG")
    print("=" * 60)
    
    scanner = MarketScanner()
    
    # Qu√©t to√†n b·ªô danh s√°ch c·ªï phi·∫øu m·∫∑c ƒë·ªãnh
    results_df = scanner.scan_market(period='3mo')
    
    if results_df.empty:
        print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch")
        return
    
    # Th·ªëng k√™ t·ªïng quan
    scanner.print_market_summary(results_df)
    
    # L∆∞u b√°o c√°o ƒë·∫ßy ƒë·ªß
    excel_file = scanner.export_market_report(results_df)
    if excel_file:
        print(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o ƒë·∫ßy ƒë·ªß: {excel_file}")
    
    return results_df

def analyze_by_sector():
    """
    Ph√¢n t√≠ch theo ng√†nh
    """
    print("üè≠ PH√ÇN T√çCH THEO NG√ÄNH")
    print("=" * 40)
    
    sectors = {
        'Ng√¢n h√†ng': ['VCB', 'CTG', 'BID', 'TCB', 'ACB', 'MBB', 'VPB', 'TPB', 'STB', 'SHB'],
        'B·∫•t ƒë·ªông s·∫£n': ['VHM', 'VIC', 'VRE', 'NVL', 'KDH', 'DXG', 'PDR', 'HDG'],
        'C√¥ng ngh·ªá': ['FPT', 'CMG', 'SAM', 'ELC'],
        'Ti√™u d√πng': ['VNM', 'SAB', 'MSN', 'MWG', 'PNJ'],
        'C√¥ng nghi·ªáp': ['HPG', 'HSG', 'DPM', 'DCM', 'GEX']
    }
    
    scanner = MarketScanner()
    
    sector_results = {}
    
    for sector_name, symbols in sectors.items():
        print(f"\nüìä Ph√¢n t√≠ch ng√†nh {sector_name}...")
        
        sector_df = scanner.scan_market(symbols=symbols, period='3mo')
        if not sector_df.empty:
            sector_results[sector_name] = sector_df
            
            # Th·ªëng k√™ ng√†nh
            buy_count = len(sector_df[sector_df['Overall_Signal'] == 'BUY'])
            sell_count = len(sector_df[sector_df['Overall_Signal'] == 'SELL'])
            total_count = len(sector_df)
            
            print(f"   üü¢ Mua: {buy_count}/{total_count} ({buy_count/total_count*100:.1f}%)")
            print(f"   üî¥ B√°n: {sell_count}/{total_count} ({sell_count/total_count*100:.1f}%)")
            
            # Top c·ªï phi·∫øu trong ng√†nh
            if buy_count > 0:
                top_buy = sector_df[sector_df['Overall_Signal'] == 'BUY'].iloc[0]
                print(f"   ‚≠ê Top mua: {top_buy['Symbol']} (ƒëi·ªÉm: {top_buy['Overall_Score']:.3f})")
    
    return sector_results

if __name__ == "__main__":
    # Ch·ªçn lo·∫°i ph√¢n t√≠ch
    print("Ch·ªçn lo·∫°i ph√¢n t√≠ch:")
    print("1. Ph√¢n t√≠ch nhanh (10 c·ªï phi·∫øu)")
    print("2. Ph√¢n t√≠ch to√†n th·ªã tr∆∞·ªùng")
    print("3. Ph√¢n t√≠ch theo ng√†nh")
    
    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
    
    if choice == "1":
        main()
    elif choice == "2":
        analyze_full_market()
    elif choice == "3":
        analyze_by_sector()
    else:
        print("Ch·∫°y ph√¢n t√≠ch m·∫∑c ƒë·ªãnh...")
        main()
