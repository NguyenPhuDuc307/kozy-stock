"""
üîÑ BACKTEST EXAMPLE - V√≠ d·ª• backtest chi·∫øn l∆∞·ª£c
==============================================

V√≠ d·ª• v·ªÅ c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng backtest v·ªõi c√°c chi·∫øn l∆∞·ª£c kh√°c nhau
"""

import sys
import os
import logging
from datetime import datetime

# Add project root to path
project_root = os.path.dirname(os.path.dirname(__file__))
sys.path.append(project_root)

try:
    from src.main import StockAnalysisSystem
    from src.strategies.backtest import BacktestEngine, StrategyLibrary
    SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Kh√¥ng th·ªÉ import h·ªá th·ªëng: {e}")
    SYSTEM_AVAILABLE = False

def setup_logging():
    """
    Thi·∫øt l·∫≠p logging
    """
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def backtest_golden_cross(symbol: str = "VCB", period: str = "2y"):
    """
    Backtest chi·∫øn l∆∞·ª£c Golden Cross
    
    Args:
        symbol: M√£ c·ªï phi·∫øu
        period: Kho·∫£ng th·ªùi gian
    """
    print(f"üîÑ Backtest Golden Cross cho {symbol} ({period})")
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    system = StockAnalysisSystem()
    engine = BacktestEngine(initial_capital=100_000_000)  # 100M VND
    
    try:
        # L·∫•y d·ªØ li·ªáu v√† t√≠nh ch·ªâ b√°o
        df = system.get_stock_data(symbol, period)
        if df is None or len(df) < 200:
            print(f"‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu cho {symbol}")
            return
        
        df_with_indicators = system.calculate_indicators(df)
        
        # Ch·∫°y backtest
        result = engine.run_backtest(df_with_indicators, StrategyLibrary.golden_cross_strategy)
        
        if result:
            print(f"\nüìä K·∫æT QU·∫¢ GOLDEN CROSS - {symbol}")
            print(f"=" * 50)
            engine.print_results(result)
            
            # So s√°nh v·ªõi Buy & Hold
            buy_hold_return = ((df['close'].iloc[-1] / df['close'].iloc[0]) - 1) * 100
            print(f"\nüìà So s√°nh v·ªõi Buy & Hold:")
            print(f"   Golden Cross: {result.total_return:.2f}%")
            print(f"   Buy & Hold: {buy_hold_return:.2f}%")
            print(f"   Ch√™nh l·ªách: {result.total_return - buy_hold_return:+.2f}%")
            
            return result
    
    except Exception as e:
        print(f"‚ùå L·ªói backtest {symbol}: {e}")
        return None

def backtest_rsi_strategy(symbol: str = "VPB", period: str = "1y"):
    """
    Backtest chi·∫øn l∆∞·ª£c RSI
    
    Args:
        symbol: M√£ c·ªï phi·∫øu
        period: Kho·∫£ng th·ªùi gian
    """
    print(f"\nüîÑ Backtest RSI Strategy cho {symbol} ({period})")
    
    system = StockAnalysisSystem()
    engine = BacktestEngine(initial_capital=100_000_000)
    
    try:
        df = system.get_stock_data(symbol, period)
        if df is None or len(df) < 50:
            print(f"‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu cho {symbol}")
            return
        
        df_with_indicators = system.calculate_indicators(df)
        
        # Ch·∫°y backtest RSI
        result = engine.run_backtest(df_with_indicators, StrategyLibrary.rsi_strategy)
        
        if result:
            print(f"\nüìä K·∫æT QU·∫¢ RSI STRATEGY - {symbol}")
            print(f"=" * 50)
            engine.print_results(result)
            
            return result
    
    except Exception as e:
        print(f"‚ùå L·ªói backtest RSI {symbol}: {e}")
        return None

def backtest_macd_strategy(symbol: str = "CTG", period: str = "1y"):
    """
    Backtest chi·∫øn l∆∞·ª£c MACD
    
    Args:
        symbol: M√£ c·ªï phi·∫øu
        period: Kho·∫£ng th·ªùi gian
    """
    print(f"\nüîÑ Backtest MACD Strategy cho {symbol} ({period})")
    
    system = StockAnalysisSystem()
    engine = BacktestEngine(initial_capital=100_000_000)
    
    try:
        df = system.get_stock_data(symbol, period)
        if df is None or len(df) < 50:
            print(f"‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu cho {symbol}")
            return
        
        df_with_indicators = system.calculate_indicators(df)
        
        # Ch·∫°y backtest MACD
        result = engine.run_backtest(df_with_indicators, StrategyLibrary.macd_strategy)
        
        if result:
            print(f"\nüìä K·∫æT QU·∫¢ MACD STRATEGY - {symbol}")
            print(f"=" * 50)
            engine.print_results(result)
            
            return result
    
    except Exception as e:
        print(f"‚ùå L·ªói backtest MACD {symbol}: {e}")
        return None

def compare_strategies(symbol: str = "VCB", period: str = "2y"):
    """
    So s√°nh c√°c chi·∫øn l∆∞·ª£c kh√°c nhau
    
    Args:
        symbol: M√£ c·ªï phi·∫øu
        period: Kho·∫£ng th·ªùi gian
    """
    print(f"\nüîÑ So s√°nh chi·∫øn l∆∞·ª£c cho {symbol} ({period})")
    
    system = StockAnalysisSystem()
    
    try:
        df = system.get_stock_data(symbol, period)
        if df is None or len(df) < 200:
            print(f"‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu cho {symbol}")
            return
        
        df_with_indicators = system.calculate_indicators(df)
        
        strategies = [
            ("Golden Cross", StrategyLibrary.golden_cross_strategy),
            ("RSI", StrategyLibrary.rsi_strategy),
            ("MACD", StrategyLibrary.macd_strategy),
            ("Bollinger Bands", StrategyLibrary.bollinger_bands_strategy)
        ]
        
        results = {}
        
        for strategy_name, strategy_func in strategies:
            try:
                engine = BacktestEngine(initial_capital=100_000_000)
                result = engine.run_backtest(df_with_indicators, strategy_func)
                
                if result:
                    results[strategy_name] = {
                        'total_return': result.total_return,
                        'max_drawdown': result.max_drawdown,
                        'sharpe_ratio': result.sharpe_ratio,
                        'win_rate': result.win_rate,
                        'total_trades': result.total_trades
                    }
                    print(f"‚úÖ {strategy_name}: {result.total_return:.2f}%")
            
            except Exception as e:
                print(f"‚ùå L·ªói v·ªõi {strategy_name}: {e}")
        
        # So s√°nh v·ªõi Buy & Hold
        buy_hold_return = ((df['close'].iloc[-1] / df['close'].iloc[0]) - 1) * 100
        results['Buy & Hold'] = {
            'total_return': buy_hold_return,
            'max_drawdown': 0,  # Simplified
            'sharpe_ratio': 0,  # Would need calculation
            'win_rate': 0,
            'total_trades': 1
        }
        
        # Hi·ªÉn th·ªã b·∫£ng so s√°nh
        print(f"\nüìä B·∫¢NG SO S√ÅNH CHI·∫æN L∆Ø·ª¢C - {symbol}")
        print(f"=" * 80)
        print(f"{'Chi·∫øn l∆∞·ª£c':<15} {'Return':<10} {'Max DD':<10} {'Sharpe':<8} {'Win%':<8} {'Trades':<8}")
        print(f"-" * 80)
        
        for strategy, metrics in results.items():
            print(f"{strategy:<15} "
                  f"{metrics['total_return']:>8.2f}% "
                  f"{metrics['max_drawdown']:>8.2f}% "
                  f"{metrics['sharpe_ratio']:>6.2f} "
                  f"{metrics['win_rate']:>6.1f}% "
                  f"{metrics['total_trades']:>6.0f}")
        
        # T√¨m chi·∫øn l∆∞·ª£c t·ªët nh·∫•t
        best_return = max(results.items(), key=lambda x: x[1]['total_return'])
        best_sharpe = max(results.items(), key=lambda x: x[1]['sharpe_ratio'])
        
        print(f"\nüèÜ K·∫æT QU·∫¢:")
        print(f"   üìà Return cao nh·∫•t: {best_return[0]} ({best_return[1]['total_return']:.2f}%)")
        print(f"   üìä Sharpe cao nh·∫•t: {best_sharpe[0]} ({best_sharpe[1]['sharpe_ratio']:.2f})")
        
        return results
    
    except Exception as e:
        print(f"‚ùå L·ªói so s√°nh chi·∫øn l∆∞·ª£c: {e}")
        return None

def portfolio_backtest(symbols: list = ["VCB", "BID", "CTG"], period: str = "1y"):
    """
    Backtest danh m·ª•c ƒë·∫ßu t∆∞
    
    Args:
        symbols: Danh s√°ch m√£ c·ªï phi·∫øu
        period: Kho·∫£ng th·ªùi gian
    """
    print(f"\nüîÑ Backtest danh m·ª•c: {', '.join(symbols)} ({period})")
    
    system = StockAnalysisSystem()
    
    portfolio_results = {}
    total_return = 0
    
    for symbol in symbols:
        try:
            df = system.get_stock_data(symbol, period)
            if df is not None and len(df) > 0:
                first_price = df['close'].iloc[0]
                last_price = df['close'].iloc[-1]
                stock_return = ((last_price / first_price) - 1) * 100
                
                portfolio_results[symbol] = stock_return
                total_return += stock_return
                
                print(f"   {symbol}: {stock_return:+.2f}%")
        
        except Exception as e:
            print(f"   ‚ùå L·ªói v·ªõi {symbol}: {e}")
    
    if portfolio_results:
        avg_return = total_return / len(portfolio_results)
        print(f"\nüìä K·∫øt qu·∫£ danh m·ª•c:")
        print(f"   üìà Return trung b√¨nh: {avg_return:.2f}%")
        print(f"   üìä T·ªïng return: {total_return:.2f}%")
        
        best_stock = max(portfolio_results.items(), key=lambda x: x[1])
        worst_stock = min(portfolio_results.items(), key=lambda x: x[1])
        
        print(f"   üèÜ T·ªët nh·∫•t: {best_stock[0]} ({best_stock[1]:+.2f}%)")
        print(f"   üìâ T·ªá nh·∫•t: {worst_stock[0]} ({worst_stock[1]:+.2f}%)")

def main():
    """
    H√†m ch√≠nh
    """
    setup_logging()
    
    print("üîÑ H·ªÜ TH·ªêNG BACKTEST CHI·∫æN L∆Ø·ª¢C")
    print("=" * 50)
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if not SYSTEM_AVAILABLE:
        print("\n‚ùå H·ªá th·ªëng kh√¥ng kh·∫£ d·ª•ng!")
        return
    
    try:
        # 1. Backtest Golden Cross
        backtest_golden_cross("VCB", "2y")
        
        # 2. Backtest RSI
        backtest_rsi_strategy("BID", "1y")
        
        # 3. Backtest MACD
        backtest_macd_strategy("CTG", "1y")
        
        # 4. So s√°nh chi·∫øn l∆∞·ª£c
        compare_strategies("VCB", "2y")
        
        # 5. Backtest danh m·ª•c
        portfolio_backtest(["VCB", "BID", "CTG", "VPB", "TCB"], "1y")
        
        print(f"\nüéâ Ho√†n th√†nh backtest!")
        print(f"üí° L∆∞u √Ω: K·∫øt qu·∫£ mang t√≠nh ch·∫•t tham kh·∫£o, kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞")
    
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è D·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        logging.error(f"L·ªói ch√≠nh: {e}")

if __name__ == "__main__":
    main()
