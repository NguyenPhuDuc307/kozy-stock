"""
üß™ BASIC ANALYSIS EXAMPLE - V√≠ d·ª• ph√¢n t√≠ch c∆° b·∫£n
===============================================

V√≠ d·ª• ƒë∆°n gi·∫£n v·ªÅ c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng ph√¢n t√≠ch ch·ª©ng kho√°n
"""

import sys
import os
import logging
from datetime import datetime

# Add project root to path
project_root = os.path.dirname(os.path.dirname(__file__))
sys.path.append(project_root)

try:
    from src.main import StockAnalysisSystem
    from src.utils.config import config
    SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Kh√¥ng th·ªÉ import h·ªá th·ªëng: {e}")
    print("üí° Vui l√≤ng ch·∫°y: pip install -r requirements.txt")
    SYSTEM_AVAILABLE = False

def setup_logging():
    """
    Thi·∫øt l·∫≠p logging
    """
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def analyze_stock(symbol: str = "VCB", period: str = "6mo"):
    """
    Ph√¢n t√≠ch m·ªôt c·ªï phi·∫øu
    
    Args:
        symbol: M√£ c·ªï phi·∫øu
        period: Kho·∫£ng th·ªùi gian
    """
    if not SYSTEM_AVAILABLE:
        print("‚ùå H·ªá th·ªëng kh√¥ng kh·∫£ d·ª•ng")
        return
    
    print(f"üîç ƒêang ph√¢n t√≠ch c·ªï phi·∫øu {symbol}...")
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    system = StockAnalysisSystem()
    
    try:
        # 1. L·∫•y th√¥ng tin c·ªï phi·∫øu
        print(f"\nüìä Th√¥ng tin {symbol}:")
        info = system.get_stock_info(symbol)
        
        if info:
            print(f"üí∞ Gi√° hi·ªán t·∫°i: {info.get('current_price', 'N/A'):,} VND")
            print(f"üìà Thay ƒë·ªïi: {info.get('change_percent', 'N/A')}%")
            print(f"üìä Kh·ªëi l∆∞·ª£ng: {info.get('volume', 'N/A'):,}")
            print(f"üè¢ C√¥ng ty: {info.get('company_name', 'N/A')}")
        
        # 2. L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠
        print(f"\nüìà D·ªØ li·ªáu l·ªãch s·ª≠ {period}:")
        df = system.get_stock_data(symbol, period)
        
        if df is not None and len(df) > 0:
            print(f"üìä S·ªë ƒëi·ªÉm d·ªØ li·ªáu: {len(df)}")
            print(f"üìÖ T·ª´ {df['time'].min()} ƒë·∫øn {df['time'].max()}")
            print(f"üí∞ Gi√° cao nh·∫•t: {df['high'].max():,.0f} VND")
            print(f"üí∞ Gi√° th·∫•p nh·∫•t: {df['low'].min():,.0f} VND")
            
            # 3. T√≠nh ch·ªâ b√°o k·ªπ thu·∫≠t
            print(f"\nüîß T√≠nh to√°n ch·ªâ b√°o k·ªπ thu·∫≠t...")
            df_indicators = system.calculate_indicators(df)
            
            if df_indicators is not None:
                latest = df_indicators.iloc[-1]
                print(f"üìä Ch·ªâ b√°o g·∫ßn nh·∫•t:")
                
                if 'rsi' in df_indicators.columns:
                    rsi = latest.get('rsi', 0)
                    rsi_status = "Overbought" if rsi > 70 else "Oversold" if rsi < 30 else "Neutral"
                    print(f"   RSI: {rsi:.1f} ({rsi_status})")
                
                if 'macd' in df_indicators.columns:
                    macd = latest.get('macd', 0)
                    macd_signal = latest.get('macd_signal', 0)
                    macd_trend = "Bullish" if macd > macd_signal else "Bearish"
                    print(f"   MACD: {macd:.3f} ({macd_trend})")
                
                if 'bb_percent' in df_indicators.columns:
                    bb_percent = latest.get('bb_percent', 0) * 100
                    bb_position = "Upper" if bb_percent > 80 else "Lower" if bb_percent < 20 else "Middle"
                    print(f"   BB%: {bb_percent:.1f}% ({bb_position})")
            
            # 4. T·∫°o t√≠n hi·ªáu giao d·ªãch
            print(f"\nüéØ T√≠n hi·ªáu giao d·ªãch:")
            df_signals = system.generate_signals(df_indicators)
            
            if df_signals is not None:
                latest_signals = df_signals.iloc[-1]
                signal_type = latest_signals.get('signal_type', 'HOLD')
                signal_score = latest_signals.get('signal_score', 0)
                
                print(f"   T√≠n hi·ªáu: {signal_type}")
                print(f"   ƒêi·ªÉm s·ªë: {signal_score}")
                
                # T√¨m t√≠n hi·ªáu active
                signal_columns = [col for col in df_signals.columns if 
                                any(keyword in col for keyword in ['cross', 'touch', 'divergence'])]
                
                active_signals = []
                for col in signal_columns:
                    if latest_signals.get(col, False):
                        active_signals.append(col)
                
                if active_signals:
                    print(f"   T√≠n hi·ªáu active: {', '.join(active_signals)}")
            
            # 5. T·∫°o bi·ªÉu ƒë·ªì (ch·ªâ th√¥ng b√°o)
            print(f"\nüìä T·∫°o bi·ªÉu ƒë·ªì...")
            fig = system.create_chart(df_signals, symbol, ['rsi'])
            
            if fig:
                print(f"   ‚úÖ Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
                print(f"   üí° Ch·∫°y ·ª©ng d·ª•ng web ƒë·ªÉ xem bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c")
            else:
                print(f"   ‚ùå Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì")
            
            # 6. Ph√¢n t√≠ch t·ªïng quan
            print(f"\nüìã T√≥m t·∫Øt ph√¢n t√≠ch:")
            
            # T√≠nh to√°n return
            first_price = df['close'].iloc[0]
            last_price = df['close'].iloc[-1]
            total_return = ((last_price / first_price) - 1) * 100
            
            print(f"   üìà T·ªïng return: {total_return:.2f}%")
            
            # Volatility
            returns = df['close'].pct_change().dropna()
            volatility = returns.std() * (252**0.5) * 100  # Annualized
            print(f"   üìä Volatility (nƒÉm): {volatility:.1f}%")
            
            # Xu h∆∞·ªõng
            if 'sma_20' in df_indicators.columns and 'sma_50' in df_indicators.columns:
                sma20 = latest.get('sma_20', 0)
                sma50 = latest.get('sma_50', 0)
                trend = "TƒÉng" if sma20 > sma50 else "Gi·∫£m"
                print(f"   üìä Xu h∆∞·ªõng: {trend}")
        
        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠")
    
    except Exception as e:
        print(f"‚ùå L·ªói khi ph√¢n t√≠ch: {e}")
        logging.error(f"L·ªói ph√¢n t√≠ch {symbol}: {e}")

def compare_stocks(symbols: list = ["VCB", "BID", "CTG"], period: str = "3mo"):
    """
    So s√°nh nhi·ªÅu c·ªï phi·∫øu
    
    Args:
        symbols: Danh s√°ch m√£ c·ªï phi·∫øu
        period: Kho·∫£ng th·ªùi gian
    """
    if not SYSTEM_AVAILABLE:
        return
    
    print(f"\nüîÑ So s√°nh {len(symbols)} c·ªï phi·∫øu: {', '.join(symbols)}")
    
    system = StockAnalysisSystem()
    results = {}
    
    for symbol in symbols:
        try:
            df = system.get_stock_data(symbol, period)
            if df is not None and len(df) > 0:
                first_price = df['close'].iloc[0]
                last_price = df['close'].iloc[-1]
                total_return = ((last_price / first_price) - 1) * 100
                
                returns = df['close'].pct_change().dropna()
                volatility = returns.std() * (252**0.5) * 100
                
                results[symbol] = {
                    'return': total_return,
                    'volatility': volatility,
                    'current_price': last_price
                }
                
                print(f"   {symbol}: Return {total_return:+.1f}%, Vol {volatility:.1f}%, Gi√° {last_price:,.0f}")
        
        except Exception as e:
            print(f"   ‚ùå L·ªói v·ªõi {symbol}: {e}")
    
    # T√¨m best performer
    if results:
        best_return = max(results.items(), key=lambda x: x[1]['return'])
        lowest_vol = min(results.items(), key=lambda x: x[1]['volatility'])
        
        print(f"\nüèÜ K·∫øt qu·∫£:")
        print(f"   üìà Return cao nh·∫•t: {best_return[0]} ({best_return[1]['return']:+.1f}%)")
        print(f"   üìä Volatility th·∫•p nh·∫•t: {lowest_vol[0]} ({lowest_vol[1]['volatility']:.1f}%)")

def main():
    """
    H√†m ch√≠nh
    """
    setup_logging()
    
    print("üöÄ H·ªÜ TH·ªêNG PH√ÇN T√çCH CH·ª®NG KHO√ÅN VI·ªÜT NAM")
    print("=" * 50)
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if not SYSTEM_AVAILABLE:
        print("\n‚ùå H·ªá th·ªëng kh√¥ng kh·∫£ d·ª•ng!")
        print("üí° Vui l√≤ng:")
        print("   1. C√†i ƒë·∫∑t requirements: pip install -r requirements.txt")
        print("   2. Ki·ªÉm tra k·∫øt n·ªëi internet")
        print("   3. Ch·∫°y l·∫°i script")
        return
    
    try:
        # 1. Ph√¢n t√≠ch c·ªï phi·∫øu ch√≠nh
        analyze_stock("VCB", "6mo")
        
        # 2. So s√°nh c√°c ng√¢n h√†ng
        compare_stocks(["VCB", "BID", "CTG", "VPB"], "3mo")
        
        # 3. Ph√¢n t√≠ch c·ªï phi·∫øu c√¥ng ngh·ªá
        print(f"\n{'='*50}")
        analyze_stock("FPT", "3mo")
        
        print(f"\nüéâ Ho√†n th√†nh ph√¢n t√≠ch!")
        print(f"üí° ƒê·ªÉ xem bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c, ch·∫°y: streamlit run web_app/app.py")
    
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è D·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        logging.error(f"L·ªói ch√≠nh: {e}")

if __name__ == "__main__":
    main()
