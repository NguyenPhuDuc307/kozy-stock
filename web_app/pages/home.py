"""
üè† HOME PAGE - Trang ch·ªß
========================

Trang hi·ªÉn th·ªã t·ªïng quan th·ªã tr∆∞·ªùng v·ªõi bi·ªÉu ƒë·ªì n·∫øn c√°c s√†n
"""

import streamlit as st
import pandas as pd
import sys
import os

# Add project root to path
project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
sys.path.append(project_root)

def render_home_page():
    """
    Render trang ch·ªß v·ªõi t·ªïng quan th·ªã tr∆∞·ªùng
    """
    import pandas as pd  # Import pandas trong function ƒë·ªÉ tr√°nh l·ªói
    
    st.markdown("# üè† T·ªïng quan th·ªã tr∆∞·ªùng")
    
    try:
        # Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
        from datetime import datetime, timedelta
        import plotly.graph_objects as go
        from plotly.subplots import make_subplots
        
        # Danh s√°ch c√°c ch·ªâ s·ªë ch√≠nh
        indices = {
            "VNINDEX": {"name": "VN-Index (HOSE)", "color": "#1f77b4", "symbol": "VNINDEX", "source": "VCI"},
            "VN30": {"name": "VN30", "color": "#ff7f0e", "symbol": "VN30", "source": "VCI"},
            "HNXINDEX": {"name": "HNX-Index", "color": "#2ca02c", "symbol": "HNXINDEX", "source": "VCI"}, 
            "HNX30": {"name": "HNX30", "color": "#d62728", "symbol": "HNX30", "source": "VCI"},
            # T·∫°m th·ªùi comment UPCOM do symbol kh√¥ng h·ªó tr·ª£
            # "UPCOM": {"name": "UPCOM-Index", "color": "#9467bd", "symbol": "UPCOM", "source": "VCI"}
        }
        
        # L·∫•y th·ªùi gian (30 ng√†y g·∫ßn nh·∫•t)
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        start_str = start_date.strftime("%Y-%m-%d")
        end_str = end_date.strftime("%Y-%m-%d")
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i c√°c s√†n
        st.markdown("### üìà Tr·∫°ng th√°i c√°c s√†n giao d·ªãch")
        
        # Container cho metrics
        cols = st.columns(len(indices))
        
        # L·∫•y d·ªØ li·ªáu cho t·ª´ng ch·ªâ s·ªë
        indices_data = {}
        for i, (key, info) in enumerate(indices.items()):
            try:
                with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu {info['name']}..."):
                    # S·ª≠ d·ª•ng vnstock API m·ªõi
                    from vnstock import Vnstock
                    
                    # Kh·ªüi t·∫°o vnstock v·ªõi source t·ª´ config
                    stock = Vnstock().stock(symbol=info['symbol'], source=info.get('source', 'VCI'))
                    
                    # L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠
                    df = stock.quote.history(
                        start=start_str,
                        end=end_str,
                        interval='1D'
                    )
                    
                    if df is not None and not df.empty:
                        # S·∫Øp x·∫øp theo th·ªùi gian
                        df = df.sort_index()
                        
                        # L·∫•y gi√° tr·ªã m·ªõi nh·∫•t
                        latest = df.iloc[-1]
                        previous = df.iloc[-2] if len(df) > 1 else latest
                        
                        # T√≠nh to√°n thay ƒë·ªïi
                        change = latest['close'] - previous['close']
                        change_pct = (change / previous['close']) * 100
                        
                        # Hi·ªÉn th·ªã metric
                        with cols[i]:
                            st.metric(
                                label=info['name'],
                                value=f"{latest['close']:,.2f}",
                                delta=f"{change:+.2f} ({change_pct:+.2f}%)"
                            )
                        
                        # L∆∞u d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
                        indices_data[key] = {
                            'data': df,
                            'info': info,
                            'latest': latest,
                            'change_pct': change_pct
                        }
                    else:
                        with cols[i]:
                            st.error(f"‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu")
                            st.caption(info['name'])
                    
            except Exception as e:
                with cols[i]:
                    st.error(f"‚ùå L·ªói {info['name']}")
                    st.caption(f"Symbol: {info['symbol']}")
                
                # Log l·ªói chi ti·∫øt
                error_msg = str(e)
                if "Invalid derivative or bond symbol" in error_msg:
                    st.warning(f"‚ö†Ô∏è {info['name']}: Symbol '{info['symbol']}' kh√¥ng h·ª£p l·ªá cho vnstock API")
                else:
                    st.error(f"L·ªói t·∫£i d·ªØ li·ªáu {info['name']}: {error_msg}")
        
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì n·∫øn
        if indices_data:
            st.markdown("### üìà Bi·ªÉu ƒë·ªì n·∫øn c√°c s√†n giao d·ªãch")
            
            # Tabs cho t·ª´ng s√†n
            tab_names = [data['info']['name'] for data in indices_data.values()]
            tabs = st.tabs(tab_names)
            
            for tab, (key, data) in zip(tabs, indices_data.items()):
                with tab:
                    df = data['data']
                    info = data['info']
                    
                    # T·∫°o bi·ªÉu ƒë·ªì n·∫øn
                    fig = go.Figure()
                    
                    # Th√™m bi·ªÉu ƒë·ªì n·∫øn
                    fig.add_trace(go.Candlestick(
                        x=df.index,  # S·ª≠ d·ª•ng index thay v√¨ 'time'
                        open=df['open'],
                        high=df['high'],
                        low=df['low'],
                        close=df['close'],
                        name=info['name'],
                        increasing_line_color='#00ff88',
                        decreasing_line_color='#ff4444'
                    ))
                    
                    # Th√™m ƒë∆∞·ªùng MA20
                    if len(df) >= 20:
                        df['ma20'] = df['close'].rolling(window=20).mean()
                        fig.add_trace(go.Scatter(
                            x=df.index,  # S·ª≠ d·ª•ng index thay v√¨ 'time'
                            y=df['ma20'],
                            mode='lines',
                            name='MA20',
                            line=dict(color='orange', width=1.5)
                        ))
                    
                    # C·∫≠p nh·∫≠t layout
                    fig.update_layout(
                        title=f"Bi·ªÉu ƒë·ªì n·∫øn {info['name']} - 30 ng√†y g·∫ßn nh·∫•t",
                        yaxis_title="Gi√°",
                        xaxis_title="Th·ªùi gian",
                        template='plotly_white',
                        height=500,
                        showlegend=True,
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=1.02,
                            xanchor="right",
                            x=1
                        )
                    )
                    
                    # Lo·∫°i b·ªè rangeslider
                    fig.update_layout(xaxis_rangeslider_visible=False)
                    
                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                    st.plotly_chart(fig, width='stretch')
                    
                    # Th√¥ng tin chi ti·∫øt
                    col1, col2, col3, col4 = st.columns(4)
                    latest = data['latest']
                    
                    with col1:
                        st.metric("M·ªü c·ª≠a", f"{latest['open']:,.2f}")
                    with col2:
                        st.metric("Cao nh·∫•t", f"{latest['high']:,.2f}")
                    with col3:
                        st.metric("Th·∫•p nh·∫•t", f"{latest['low']:,.2f}")
                    with col4:
                        st.metric("Kh·ªëi l∆∞·ª£ng", f"{latest['volume']:,.0f}")
        
        # Ph·∫ßn th·ªëng k√™ t·ªïng quan
        st.markdown("---")
        st.markdown("### üìä Th·ªëng k√™ t·ªïng quan")
        
        if indices_data:
            # B·∫£ng t√≥m t·∫Øt
            summary_data = []
            for key, data in indices_data.items():
                latest = data['latest']
                info = data['info']
                change_pct = data['change_pct']
                
                # T√≠nh ƒëi·ªÉm thay ƒë·ªïi tuy·ªát ƒë·ªëi
                previous_data = data['data'].iloc[-2] if len(data['data']) > 1 else latest
                change_points = latest['close'] - previous_data['close']
                
                summary_data.append({
                    "S√†n": info['name'],
                    "Gi√° ƒë√≥ng c·ª≠a": f"{latest['close']:,.2f}",
                    "Thay ƒë·ªïi": f"{change_points:+.2f} ({change_pct:+.2f}%)",
                    "Kh·ªëi l∆∞·ª£ng": f"{latest['volume']:,.0f}",
                    "Cao nh·∫•t": f"{latest['high']:,.2f}",
                    "Th·∫•p nh·∫•t": f"{latest['low']:,.2f}"
                })
            
            summary_df = pd.DataFrame(summary_data)
            
            # ƒê·ªãnh d·∫°ng b·∫£ng v·ªõi m√†u s·∫Øc
            def color_change(val):
                if "+" in val:
                    return 'color: green'
                elif "-" in val:
                    return 'color: red'
                return 'color: black'
            
            styled_df = summary_df.style.map(color_change, subset=['Thay ƒë·ªïi'])
            st.dataframe(styled_df, width='stretch', hide_index=True)
            
    except ImportError:
        st.error("‚ùå Kh√¥ng th·ªÉ import vnstock. Vui l√≤ng c√†i ƒë·∫∑t: `pip install vnstock`")
    except Exception as e:
        st.error(f"‚ùå L·ªói: {str(e)}")
        
        # Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
        st.warning("‚ö†Ô∏è Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u do kh√¥ng th·ªÉ k·∫øt n·ªëi")
        
        # D·ªØ li·ªáu m·∫´u
        sample_data = {
            "S√†n": ["VN-Index (HOSE)", "VN30", "HNX-Index", "HNX30", "UPCOM-Index"],
            "Gi√° ƒë√≥ng c·ª≠a": ["1,240.50", "1,285.20", "230.15", "450.80", "85.25"],
            "Thay ƒë·ªïi (%)": ["+0.85%", "+1.20%", "-0.45%", "+0.65%", "-0.12%"],
            "Kh·ªëi l∆∞·ª£ng": ["485,250,000", "125,180,000", "45,680,000", "25,450,000", "12,350,000"]
        }
        
        sample_df = pd.DataFrame(sample_data)
        st.dataframe(sample_df, width='stretch', hide_index=True)

# Main page function for st.Page  
render_home_page()
