"""
üìä STOCK COMPARISON PAGE - Trang so s√°nh c·ªï phi·∫øu
=================================================

Trang so s√°nh hi·ªáu su·∫•t gi·ªØa c√°c c·ªï phi·∫øu
"""

import streamlit as st
import sys
import os

# Add project root to path
project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
sys.path.append(project_root)

def render_comparison_page():
    """
    Render trang so s√°nh c·ªï phi·∫øu
    """
    st.markdown("# üìä So s√°nh c·ªï phi·∫øu")
    
    try:
        # Import portfolio manager
        from src.utils.portfolio_manager import PortfolioManager
        
        # Initialize portfolio manager
        portfolio_manager = PortfolioManager()
        all_stocks = sorted(portfolio_manager.get_all_stocks())
        
        if not all_stocks:
            # Fallback if no portfolios
            all_stocks = ["VCB", "CTG", "BID", "ACB", "VIC", "FPT", "MSN", "VNM", "PLX", "TCB"]
            st.warning("‚ö†Ô∏è Ch∆∞a c√≥ danh m·ª•c n√†o. S·ª≠ d·ª•ng danh s√°ch m·∫∑c ƒë·ªãnh.")
            st.info("üí° H√£y v√†o 'Qu·∫£n l√Ω danh m·ª•c' ƒë·ªÉ t·∫°o danh m·ª•c!")
        
        # Basic comparison interface
        st.markdown("## Ch·ªçn c·ªï phi·∫øu ƒë·ªÉ so s√°nh")
        
        col1, col2 = st.columns(2)
        
        with col1:
            stock1 = st.selectbox("C·ªï phi·∫øu 1:", all_stocks, index=0, key="stock1")
        
        with col2:
            # Ensure stock2 is different from stock1
            stock2_options = [s for s in all_stocks if s != stock1]
            stock2 = st.selectbox("C·ªï phi·∫øu 2:", stock2_options, index=0, key="stock2")
    
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o: {str(e)}")
        # Fallback
        all_stocks = ["VCB", "CTG", "BID", "ACB", "VIC", "FPT", "MSN", "VNM", "PLX", "TCB"]
        
        # Basic comparison interface
        st.markdown("## Ch·ªçn c·ªï phi·∫øu ƒë·ªÉ so s√°nh")
        
        col1, col2 = st.columns(2)
        
        with col1:
            stock1 = st.selectbox("C·ªï phi·∫øu 1:", all_stocks, index=0, key="stock1")
        
        with col2:
            stock2 = st.selectbox("C·ªï phi·∫øu 2:", all_stocks, index=1, key="stock2")
    
    # Th·ªùi gian so s√°nh
    st.markdown("## ‚è∞ Kho·∫£ng th·ªùi gian")
    time_period = st.selectbox(
        "Ch·ªçn kho·∫£ng th·ªùi gian:",
        ["1 th√°ng", "3 th√°ng", "6 th√°ng", "1 nƒÉm", "2 nƒÉm"],
        index=2
    )
    
    # Map time period to days
    period_map = {
        "1 th√°ng": 30,
        "3 th√°ng": 90, 
        "6 th√°ng": 180,
        "1 nƒÉm": 365,
        "2 nƒÉm": 730
    }
    days = period_map[time_period]
    
    if st.button("üìä So s√°nh", type="primary"):
        if stock1 == stock2:
            st.error("‚ùå Vui l√≤ng ch·ªçn 2 c·ªï phi·∫øu kh√°c nhau!")
            return
            
        with st.spinner("üîÑ ƒêang t·∫£i d·ªØ li·ªáu v√† ph√¢n t√≠ch..."):
            try:
                # Import c·∫ßn thi·∫øt
                from datetime import datetime, timedelta
                import pandas as pd
                import plotly.graph_objects as go
                from plotly.subplots import make_subplots
                import sys
                import os
                
                # Add project root to path for imports
                project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
                sys.path.append(project_root)
                
                try:
                    from src.data.data_provider import DataProvider
                    from src.utils.config import ConfigManager
                except ImportError:
                    # Fallback for Streamlit Cloud
                    sys.path.append(os.path.join(project_root, 'src'))
                    from data.data_provider import DataProvider
                    from utils.config import ConfigManager
                
                # Simple config class for DataProvider
                class SimpleConfig:
                    CACHE_ENABLED = True
                    CACHE_DURATION = 300
                
                # Get data for both stocks
                config = ConfigManager()
                data_provider = DataProvider(SimpleConfig())
                
                end_date = datetime.now()
                start_date = end_date - timedelta(days=days)
                
                # Fetch data for stock 1
                data1 = data_provider.get_historical_data(
                    symbol=stock1,
                    start_date=start_date.strftime('%Y-%m-%d'),
                    end_date=end_date.strftime('%Y-%m-%d'),
                    resolution='1D'
                )
                
                # Fetch data for stock 2
                data2 = data_provider.get_historical_data(
                    symbol=stock2,
                    start_date=start_date.strftime('%Y-%m-%d'),
                    end_date=end_date.strftime('%Y-%m-%d'),
                    resolution='1D'
                )
                
                if data1 is None or data2 is None or data1.empty or data2.empty:
                    st.error("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho m·ªôt ho·∫∑c c·∫£ hai c·ªï phi·∫øu!")
                    return
                
                # Normalize prices to percentage change
                data1_norm = (data1['close'] / data1['close'].iloc[0] - 1) * 100
                data2_norm = (data2['close'] / data2['close'].iloc[0] - 1) * 100
                
                # T√≠nh to√°n metrics so s√°nh
                returns1 = data1['close'].pct_change().dropna()
                returns2 = data2['close'].pct_change().dropna()
                
                # Performance metrics
                total_return1 = (data1['close'].iloc[-1] / data1['close'].iloc[0] - 1) * 100
                total_return2 = (data2['close'].iloc[-1] / data2['close'].iloc[0] - 1) * 100
                
                volatility1 = returns1.std() * (252**0.5) * 100  # Annualized
                volatility2 = returns2.std() * (252**0.5) * 100
                
                # Sharpe ratio (gi·∫£ s·ª≠ risk-free rate = 5%)
                sharpe1 = (returns1.mean() * 252 - 0.05) / (returns1.std() * (252**0.5)) if returns1.std() > 0 else 0
                sharpe2 = (returns2.mean() * 252 - 0.05) / (returns2.std() * (252**0.5)) if returns2.std() > 0 else 0
                
                # Max drawdown
                cumulative1 = (1 + returns1).cumprod()
                running_max1 = cumulative1.cummax()
                drawdown1 = (cumulative1 - running_max1) / running_max1
                max_drawdown1 = drawdown1.min() * 100
                
                cumulative2 = (1 + returns2).cumprod()
                running_max2 = cumulative2.cummax()
                drawdown2 = (cumulative2 - running_max2) / running_max2
                max_drawdown2 = drawdown2.min() * 100
                
                # Correlation
                correlation = returns1.corr(returns2)
                
                # Display results
                st.success("‚úÖ Ph√¢n t√≠ch ho√†n th√†nh!")
                
                # Performance comparison chart
                st.markdown("## üìà Bi·ªÉu ƒë·ªì so s√°nh hi·ªáu su·∫•t")
                
                fig = go.Figure()
                
                fig.add_trace(go.Scatter(
                    x=data1.index,
                    y=data1_norm,
                    mode='lines',
                    name=f'{stock1}',
                    line=dict(color='blue', width=2)
                ))
                
                fig.add_trace(go.Scatter(
                    x=data2.index,
                    y=data2_norm,
                    mode='lines',
                    name=f'{stock2}',
                    line=dict(color='red', width=2)
                ))
                
                fig.update_layout(
                    title=f'So s√°nh hi·ªáu su·∫•t: {stock1} vs {stock2} ({time_period})',
                    xaxis_title='Th·ªùi gian',
                    yaxis_title='Thay ƒë·ªïi gi√° (%)',
                    height=500,
                    hovermode='x unified'
                )
                
                st.plotly_chart(fig, width='stretch')
                
                # Performance metrics table
                st.markdown("## üìä B·∫£ng so s√°nh ch·ªâ s·ªë")
                
                metrics_df = pd.DataFrame({
                    'Ch·ªâ s·ªë': [
                        'T·ªïng l·ª£i nhu·∫≠n (%)',
                        'Volatility h√†ng nƒÉm (%)', 
                        'Sharpe Ratio',
                        'Max Drawdown (%)',
                        'Gi√° hi·ªán t·∫°i (VND)',
                        'Gi√° cao nh·∫•t (VND)',
                        'Gi√° th·∫•p nh·∫•t (VND)'
                    ],
                    stock1: [
                        f"{total_return1:.2f}%",
                        f"{volatility1:.2f}%",
                        f"{sharpe1:.2f}",
                        f"{max_drawdown1:.2f}%",
                        f"{data1['close'].iloc[-1]:,.0f}",
                        f"{data1['high'].max():,.0f}",
                        f"{data1['low'].min():,.0f}"
                    ],
                    stock2: [
                        f"{total_return2:.2f}%",
                        f"{volatility2:.2f}%",
                        f"{sharpe2:.2f}",
                        f"{max_drawdown2:.2f}%",
                        f"{data2['close'].iloc[-1]:,.0f}",
                        f"{data2['high'].max():,.0f}",
                        f"{data2['low'].min():,.0f}"
                    ]
                })
                
                st.dataframe(metrics_df, width='stretch')
                
                # Correlation analysis
                st.markdown("## üîó Ph√¢n t√≠ch t∆∞∆°ng quan")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("H·ªá s·ªë t∆∞∆°ng quan", f"{correlation:.3f}")
                
                with col2:
                    if correlation > 0.7:
                        correlation_desc = "Cao"
                        color = "üî¥"
                    elif correlation > 0.3:
                        correlation_desc = "Trung b√¨nh"
                        color = "üü°"
                    else:
                        correlation_desc = "Th·∫•p"
                        color = "üü¢"
                    st.metric("M·ª©c ƒë·ªô", f"{color} {correlation_desc}")
                
                with col3:
                    diversification = "T·ªët" if correlation < 0.5 else "K√©m"
                    st.metric("ƒêa d·∫°ng h√≥a", diversification)
                
                # Winner analysis
                st.markdown("## üèÜ K·∫øt lu·∫≠n")
                
                if total_return1 > total_return2:
                    winner = stock1
                    winner_return = total_return1
                    loser_return = total_return2
                else:
                    winner = stock2
                    winner_return = total_return2
                    loser_return = total_return1
                
                st.success(f"üèÜ **{winner}** c√≥ hi·ªáu su·∫•t t·ªët h∆°n v·ªõi l·ª£i nhu·∫≠n {winner_return:.2f}% so v·ªõi {loser_return:.2f}%")
                
                # Risk-adjusted analysis
                if sharpe1 > sharpe2:
                    risk_winner = stock1
                    risk_winner_sharpe = sharpe1
                else:
                    risk_winner = stock2
                    risk_winner_sharpe = sharpe2
                
                st.info(f"üíé **{risk_winner}** c√≥ Sharpe Ratio t·ªët h∆°n ({risk_winner_sharpe:.2f}) - hi·ªáu su·∫•t ƒëi·ªÅu ch·ªânh theo r·ªßi ro")
                
                # Trading recommendations
                st.markdown("## üí° Khuy·∫øn ngh·ªã")
                
                if correlation < 0.3:
                    st.success("‚úÖ **Ph√π h·ª£p ƒë·ªÉ ƒëa d·∫°ng h√≥a** - Hai c·ªï phi·∫øu c√≥ t∆∞∆°ng quan th·∫•p, gi√∫p gi·∫£m r·ªßi ro danh m·ª•c")
                elif correlation > 0.7:
                    st.warning("‚ö†Ô∏è **Kh√¥ng ph√π h·ª£p ƒë·ªÉ ƒëa d·∫°ng h√≥a** - Hai c·ªï phi·∫øu c√≥ t∆∞∆°ng quan cao, r·ªßi ro t∆∞∆°ng t·ª± nhau")
                else:
                    st.info("‚ÑπÔ∏è **ƒêa d·∫°ng h√≥a trung b√¨nh** - C√≥ th·ªÉ k·∫øt h·ª£p nh∆∞ng c·∫ßn c√¢n nh·∫Øc t·ª∑ tr·ªçng")
                
            except Exception as e:
                st.error(f"‚ùå L·ªói khi ph√¢n t√≠ch: {str(e)}")
                # Fallback simple comparison
                st.info("üîÑ Hi·ªÉn th·ªã giao di·ªán ƒë∆°n gi·∫£n...")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(f"### üìà {stock1}")
                    st.info("D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y")
                
                with col2:
                    st.markdown(f"### üìà {stock2}")
                    st.info("D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y")

# Main page function for st.Page
render_comparison_page()
