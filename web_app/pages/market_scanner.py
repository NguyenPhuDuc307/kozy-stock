"""
üîç MARKET SCANNER PAGE - Trang qu√©t th·ªã tr∆∞·ªùng
==============================================

Trang qu√©t th·ªã tr∆∞·ªùng ƒë·ªÉ t√¨m c∆° h·ªôi ƒë·∫ßu t∆∞
"""

import streamlit as st
import sys
import os

# Add project root to path
project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
sys.path.append(project_root)

def render_market_scanner_page():
    """
    Render trang Market Scanner
    """
    st.markdown("# üîç Qu√©t th·ªã tr∆∞·ªùng")
    
    try:
        # Import here to avoid circular imports
        from src.analysis.market_scanner import MarketScanner
        from src.utils.portfolio_manager import PortfolioManager
        
        # Initialize portfolio manager
        portfolio_manager = PortfolioManager()
        
        # Sidebar controls
        st.sidebar.markdown("## üîç T√πy ch·ªçn qu√©t")
        
        # Get available portfolios
        portfolios = portfolio_manager.get_portfolios()
        
        if portfolios:
            scan_types = {}
            # Add portfolio-based scan types
            for portfolio_name in portfolios.keys():
                scan_types[f"Qu√©t {portfolio_name}"] = portfolio_name
        else:
            # Fallback if no portfolios
            scan_types = {
                "Qu√©t nhanh (Top 10)": "quick",
                "Qu√©t VN30": "vn30", 
                "Qu√©t ng√¢n h√†ng": "banks",
                "Qu√©t b·∫•t ƒë·ªông s·∫£n": "real_estate"
            }
            st.sidebar.warning("‚ö†Ô∏è Ch∆∞a c√≥ danh m·ª•c n√†o. S·ª≠ d·ª•ng qu√©t m·∫∑c ƒë·ªãnh.")
            st.sidebar.info("üí° H√£y v√†o 'Qu·∫£n l√Ω danh m·ª•c' ƒë·ªÉ t·∫°o danh m·ª•c!")
        
        selected_scan = st.sidebar.selectbox(
            "üìä Lo·∫°i qu√©t:",
            list(scan_types.keys())
        )
        
        scan_type = scan_types[selected_scan]
        
        # Filters
        min_score = st.sidebar.slider(
            "ƒêi·ªÉm t√≠n hi·ªáu t·ªëi thi·ªÉu:",
            min_value=-1.0,
            max_value=1.0,
            value=-0.5,
            step=0.1
        )
        
        # Scan button
        scan_clicked = st.sidebar.button("üîç Qu√©t th·ªã tr∆∞·ªùng", type="primary")
        
        # Landing page - hi·ªÉn th·ªã khi ch∆∞a qu√©t
        if not scan_clicked:
            st.markdown("""
            ### üìÅ Danh m·ª•c c√≥ s·∫µn:
            """)
            
            # Hi·ªÉn th·ªã danh s√°ch portfolios
            portfolios = portfolio_manager.get_portfolios()
            if portfolios:
                cols = st.columns(3)
                for i, (portfolio_name, stocks) in enumerate(portfolios.items()):
                    with cols[i % 3]:
                        st.info(f"**{portfolio_name}**\n{len(stocks)} c·ªï phi·∫øu")
            else:
                st.warning("‚ö†Ô∏è Ch∆∞a c√≥ danh m·ª•c n√†o")
            
            return
        
        # Scan execution
        if scan_clicked:
            with st.spinner("ƒêang qu√©t th·ªã tr∆∞·ªùng..."):
                try:
                    scanner = MarketScanner()
                    
                    # Get symbols based on selected portfolio
                    if scan_type in portfolios:
                        symbols = portfolios[scan_type]
                    else:
                        # Fallback for old scan types
                        if scan_type == "quick":
                            symbols = ["VCB", "CTG", "BID", "ACB", "VHM", "VIC", "VNM", "HPG", "MSN", "PLX"]
                        elif scan_type == "vn30":
                            symbols = ["VCB", "CTG", "BID", "ACB", "VHM", "VIC", "VNM", "HPG", "MSN", "PLX",
                                     "TCB", "MBB", "TPB", "VPB", "STB", "SSI", "VND", "FPT", "GAS", "POW"]
                        elif scan_type == "banks":
                            symbols = ["VCB", "CTG", "BID", "ACB", "TCB", "MBB", "TPB", "VPB", "STB", "SHB"]
                        elif scan_type == "real_estate":
                            symbols = ["VHM", "VIC", "NVL", "PDR", "DXG", "KDH", "DIG", "CEO", "HDG", "NLG"]
                        else:
                            symbols = ["VCB", "FPT", "VHM"]  # Default fallback
                    
                    results = scanner.scan_market(symbols)
                    
                    if results is not None and not results.empty:
                        # Filter results by score
                        filtered_results = results[results['Overall_Score'] >= min_score]
                        
                        if not filtered_results.empty:
                            # Display results
                            st.subheader(f"üìä K·∫øt qu·∫£ qu√©t ({len(filtered_results)} c·ªï phi·∫øu)")
                            
                            # Overview metrics
                            buy_signals = len(filtered_results[filtered_results['Overall_Signal'] == 'BUY'])
                            sell_signals = len(filtered_results[filtered_results['Overall_Signal'] == 'SELL'])
                            hold_signals = len(filtered_results[filtered_results['Overall_Signal'] == 'HOLD'])
                            
                            col1, col2, col3, col4 = st.columns(4)
                            
                            with col1:
                                st.metric("T·ªïng c·ªï phi·∫øu", len(filtered_results))
                            with col2:
                                st.metric("T√≠n hi·ªáu MUA", buy_signals)
                            with col3:
                                st.metric("T√≠n hi·ªáu B√ÅN", sell_signals)
                            with col4:
                                st.metric("T√≠n hi·ªáu GI·ªÆ", hold_signals)
                            
                            # Results table
                            st.subheader("üìã Chi ti·∫øt k·∫øt qu·∫£")
                            
                            # Format display
                            if not filtered_results.empty:
                                display_df = filtered_results[['Symbol', 'Overall_Signal', 'Overall_Score', 'Liquidity_Ratio']].copy()
                                display_df['Overall_Score'] = display_df['Overall_Score'].round(2)
                                display_df['Liquidity_Ratio'] = display_df['Liquidity_Ratio'].round(2)
                                
                                # Sort by score
                                display_df = display_df.sort_values('Overall_Score', ascending=False)
                                
                                st.dataframe(display_df, use_container_width=True)
                                
                                # Top picks
                                st.subheader("üèÜ Top picks")
                                
                                if buy_signals > 0:
                                    buy_stocks = filtered_results[filtered_results['Overall_Signal'] == 'BUY'].nlargest(3, 'Overall_Score')
                                    st.success(f"**T√≠n hi·ªáu MUA:** {', '.join(buy_stocks['Symbol'].tolist())}")
                                
                                if sell_signals > 0:
                                    sell_stocks = filtered_results[filtered_results['Overall_Signal'] == 'SELL'].nsmallest(3, 'Overall_Score')
                                    st.error(f"**T√≠n hi·ªáu B√ÅN:** {', '.join(sell_stocks['Symbol'].tolist())}")
                        else:
                            st.warning("‚ùå Kh√¥ng c√≥ c·ªï phi·∫øu n√†o th·ªèa m√£n b·ªô l·ªçc")
                    else:
                        st.error("‚ùå Kh√¥ng th·ªÉ qu√©t th·ªã tr∆∞·ªùng")
                        
                except Exception as e:
                    st.error(f"‚ùå L·ªói qu√©t th·ªã tr∆∞·ªùng: {str(e)}")
        
    except ImportError as e:
        st.error("‚ùå Kh√¥ng th·ªÉ load Market Scanner")
        st.info("üí° Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t Market Scanner")
        st.code(f"Import error: {e}")
        
        # Fallback simple interface
        st.markdown("## üîß Giao di·ªán ƒë∆°n gi·∫£n")
        scan_type = st.selectbox("Ch·ªçn lo·∫°i qu√©t:", ["Top 10", "VN30", "Banks"])
        if st.button("Qu√©t"):
            st.info(f"ƒêang qu√©t {scan_type}...")

# Main page function for st.Page
render_market_scanner_page()
